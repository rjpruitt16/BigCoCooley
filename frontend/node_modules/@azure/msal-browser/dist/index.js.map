{"version":3,"file":"index.js","sources":["../../msal-common/dist/index.es.js","../src/utils/BrowserConstants.ts","../src/network/FetchClient.ts","../src/error/BrowserAuthError.ts","../src/network/XhrClient.ts","../src/utils/BrowserUtils.ts","../src/app/Configuration.ts","../src/error/BrowserConfigurationAuthError.ts","../src/cache/BrowserStorage.ts","../src/utils/MathUtils.ts","../src/crypto/GuidGenerator.ts","../src/utils/BrowserStringUtils.ts","../src/encode/Base64Encode.ts","../src/encode/Base64Decode.ts","../src/crypto/PkceGenerator.ts","../src/crypto/BrowserCrypto.ts","../src/crypto/CryptoOps.ts","../src/interaction_handler/InteractionHandler.ts","../src/interaction_handler/RedirectHandler.ts","../src/interaction_handler/PopupHandler.ts","../src/app/PublicClientApplication.ts"],"sourcesContent":["/*! @azure/msal-common v1.0.0-alpha.0 2020-01-18 */\n'use strict';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: \"unexpected_error\",\r\n        desc: \"Unexpected error in authentication.\"\r\n    }\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nvar AuthError = /** @class */ (function (_super) {\r\n    __extends(AuthError, _super);\r\n    function AuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorMessage) || this;\r\n        Object.setPrototypeOf(_this, AuthError.prototype);\r\n        _this.errorCode = errorCode;\r\n        _this.errorMessage = errorMessage;\r\n        _this.name = \"AuthError\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error that is thrown when something unexpected happens in the library.\r\n     * @param errDesc\r\n     */\r\n    AuthError.createUnexpectedError = function (errDesc) {\r\n        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + \": \" + errDesc);\r\n    };\r\n    return AuthError;\r\n}(Error));\n\n// Token renewal offset default in seconds\r\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\n// Default module system options\r\nvar DEFAULT_SYSTEM_OPTIONS = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    telemetry: null\r\n};\r\n// Default logger implementation\r\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: function () {\r\n        var notImplErr = \"Logger - loggerCallbackInterface() has not been implemented.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    piiLoggingEnabled: false\r\n};\r\n// Default storage implementation\r\nvar DEFAULT_STORAGE_IMPLEMENTATION = {\r\n    clear: function () {\r\n        var notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    containsKey: function () {\r\n        var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    getItem: function () {\r\n        var notImplErr = \"Storage interface - getItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    getKeys: function () {\r\n        var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    removeItem: function () {\r\n        var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    setItem: function () {\r\n        var notImplErr = \"Storage interface - setItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n};\r\n// Default network implementation\r\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    sendGetRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    sendPostRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\r\n// Default crypto implementation\r\nvar DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: function () {\r\n        var notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Decode: function () {\r\n        var notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Encode: function () {\r\n        var notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    generatePkceCodes: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TStorageOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n *\r\n * @returns MsalConfiguration object\r\n */\r\nfunction buildModuleConfiguration(_a) {\r\n    var userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface;\r\n    var overlayedConfig = {\r\n        systemOptions: userSystemOptions || DEFAULT_SYSTEM_OPTIONS,\r\n        loggerOptions: userLoggerOption || DEFAULT_LOGGER_IMPLEMENTATION,\r\n        storageInterface: storageImplementation || DEFAULT_STORAGE_IMPLEMENTATION,\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION\r\n    };\r\n    return overlayedConfig;\r\n}\n\n/**\r\n * Access token cache item which is used to manage tokens and token renewal.\r\n */\r\nvar AccessTokenCacheItem = /** @class */ (function () {\r\n    function AccessTokenCacheItem(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    return AccessTokenCacheItem;\r\n}());\n\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    idTokenParsingError: {\r\n        code: \"id_token_parsing_error\",\r\n        desc: \"ID token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyIdToken: {\r\n        code: \"null_or_empty_id_token\",\r\n        desc: \"The idToken is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenRequestCacheError: {\r\n        code: \"token_request_cache_error\",\r\n        desc: \"The token request could not be fetched from the cache correctly.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    invalidAuthorityType: {\r\n        code: \"invalid_authority_type\",\r\n        desc: \"The given authority is not a valid type of authority supported by MSAL. Please review the trace to determine the root cause.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    accountMismatchError: {\r\n        code: \"account_mismatch\",\r\n        desc: \"The cached account and account which made the token request do not match.\"\r\n    },\r\n    invalidIdToken: {\r\n        code: \"invalid_id_token\",\r\n        desc: \"Invalid ID token format.\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    cacheParseError: {\r\n        code: \"cache_parse_error\",\r\n        desc: \"Could not parse cache key.\"\r\n    },\r\n    userLoginRequiredError: {\r\n        code: \"user_login_error\",\r\n        desc: \"User login is required.\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority, resource, or account.\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    ClientAuthError.createClientInfoEmptyError = function (rawClientInfo) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, ClientAuthErrorMessage.clientInfoEmptyError.desc + \" Given Object: \" + rawClientInfo);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    ClientAuthError.createIdTokenParsingError = function (caughtExtractionError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.idTokenParsingError.code, ClientAuthErrorMessage.idTokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    ClientAuthError.createIdTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyIdToken.code, ClientAuthErrorMessage.nullOrEmptyIdToken.desc + \" Raw ID Token Value: \" + invalidRawTokenString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the token request could not be retrieved from the cache\r\n     * @param errDetail\r\n     */\r\n    ClientAuthError.createTokenRequestCacheError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCacheError.code, ClientAuthErrorMessage.tokenRequestCacheError.desc + \" Error Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown if authority type is not valid.\r\n     * @param invalidAuthorityError\r\n     */\r\n    ClientAuthError.createInvalidAuthorityTypeError = function (givenUrl) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAuthorityType.code, ClientAuthErrorMessage.invalidAuthorityType.desc + \" Given Url: \" + givenUrl);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param invalidAuthorityError\r\n     */\r\n    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\r\n    };\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    ClientAuthError.createStateMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    ClientAuthError.createNonceMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the cached account and response account do not match.\r\n     */\r\n    ClientAuthError.createAccountMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.accountMismatchError.code, ClientAuthErrorMessage.accountMismatchError.desc);\r\n    };\r\n    /**\r\n     * Throws error if idToken is not correctly formed\r\n     * @param idToken\r\n     */\r\n    ClientAuthError.createInvalidIdTokenError = function (idToken) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidIdToken.code, ClientAuthErrorMessage.invalidIdToken.desc + \" Given token: \" + JSON.stringify(idToken));\r\n    };\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    ClientAuthError.createNoTokensFoundError = function (scopes) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc + \" Scopes: \" + scopes);\r\n    };\r\n    /**\r\n     * Creates an error in cache parsing.\r\n     */\r\n    ClientAuthError.createCacheParseError = function (cacheKey) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.cacheParseError.code, ClientAuthErrorMessage.cacheParseError.desc + \" Cache key: \" + cacheKey);\r\n    };\r\n    /**\r\n     * Throws error when renewing token without login.\r\n     */\r\n    ClientAuthError.createUserLoginRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userLoginRequiredError.code, ClientAuthErrorMessage.userLoginRequiredError.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple tokens are in cache for the given scope.\r\n     * @param scope\r\n     */\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function (scope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, \"Cache error for scope \" + scope + \": \" + ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    ClientAuthError.createTokenRequestCannotBeMadeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError));\n\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param jwtToken\r\n     */\r\n    StringUtils.decodeJwt = function (jwtToken) {\r\n        if (StringUtils.isEmpty(jwtToken)) {\r\n            throw ClientAuthError.createIdTokenNullOrEmptyError(jwtToken);\r\n        }\r\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = idTokenPartsRegex.exec(jwtToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createIdTokenParsingError(\"Given token is malformed: \" + JSON.stringify(jwtToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries and converts them to lower case.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimAndConvertArrayEntriesToLowerCase = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim().toLowerCase(); });\r\n    };\r\n    return StringUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    // Default response type for authorization code flow\r\n    CODE_RESPONSE_TYPE: \"code\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded\"\r\n};\r\n/**\r\n * Request header names\r\n */\r\nvar HEADER_NAMES;\r\n(function (HEADER_NAMES) {\r\n    HEADER_NAMES[\"CONTENT_TYPE\"] = \"Content-Type\";\r\n})(HEADER_NAMES || (HEADER_NAMES = {}));\r\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\r\nvar TemporaryCacheKeys;\r\n(function (TemporaryCacheKeys) {\r\n    TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\r\n    TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireToken.account\";\r\n    TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\r\n    TemporaryCacheKeys[\"REQUEST_STATE\"] = \"request.state\";\r\n    TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.idtoken\";\r\n    TemporaryCacheKeys[\"ORIGIN_URI\"] = \"request.origin\";\r\n    TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\r\n    TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\r\n    TemporaryCacheKeys[\"REQUEST_PARAMS\"] = \"request.params\";\r\n    TemporaryCacheKeys[\"REDIRECT_REQUEST\"] = \"redirect.request\";\r\n    TemporaryCacheKeys[\"SCOPES\"] = \"scopes\";\r\n})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nvar PersistentCacheKeys;\r\n(function (PersistentCacheKeys) {\r\n    PersistentCacheKeys[\"ID_TOKEN\"] = \"idtoken\";\r\n    PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\r\n    PersistentCacheKeys[\"ADAL_ID_TOKEN\"] = \"adal.idtoken\";\r\n    PersistentCacheKeys[\"ERROR\"] = \"error\";\r\n    PersistentCacheKeys[\"ERROR_DESC\"] = \"error.description\";\r\n})(PersistentCacheKeys || (PersistentCacheKeys = {}));\r\n/**\r\n * List of pre-established trusted host URLs.\r\n */\r\nvar AADTrustedHostList = [\r\n    \"login.windows.net\",\r\n    \"login.chinacloudapi.cn\",\r\n    \"login.cloudgovapi.us\",\r\n    \"login.microsoftonline.com\",\r\n    \"login.microsoftonline.de\",\r\n    \"login.microsoftonline.us\"\r\n];\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nvar AADAuthorityConstants;\r\n(function (AADAuthorityConstants) {\r\n    AADAuthorityConstants[\"COMMON\"] = \"common\";\r\n    AADAuthorityConstants[\"ORGANIZATIONS\"] = \"organizations\";\r\n    AADAuthorityConstants[\"CONSUMERS\"] = \"consumers\";\r\n})(AADAuthorityConstants || (AADAuthorityConstants = {}));\r\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\r\nvar AADServerParamKeys;\r\n(function (AADServerParamKeys) {\r\n    AADServerParamKeys[\"CLIENT_ID\"] = \"client_id\";\r\n    AADServerParamKeys[\"RESOURCE\"] = \"resource\";\r\n    AADServerParamKeys[\"REDIRECT_URI\"] = \"redirect_uri\";\r\n    AADServerParamKeys[\"RESPONSE_TYPE\"] = \"response_type\";\r\n    AADServerParamKeys[\"RESPONSE_MODE\"] = \"response_mode\";\r\n    AADServerParamKeys[\"GRANT_TYPE\"] = \"grant_type\";\r\n    AADServerParamKeys[\"CLAIMS\"] = \"claims\";\r\n    AADServerParamKeys[\"SCOPE\"] = \"scope\";\r\n    AADServerParamKeys[\"ERROR\"] = \"error\";\r\n    AADServerParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\r\n    AADServerParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    AADServerParamKeys[\"ID_TOKEN\"] = \"id_token\";\r\n    AADServerParamKeys[\"REFRESH_TOKEN\"] = \"refresh_token\";\r\n    AADServerParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\r\n    AADServerParamKeys[\"STATE\"] = \"state\";\r\n    AADServerParamKeys[\"NONCE\"] = \"nonce\";\r\n    AADServerParamKeys[\"PROMPT\"] = \"prompt\";\r\n    AADServerParamKeys[\"SESSION_STATE\"] = \"session_state\";\r\n    AADServerParamKeys[\"CLIENT_INFO\"] = \"client_info\";\r\n    AADServerParamKeys[\"CODE\"] = \"code\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE\"] = \"code_challenge\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE_METHOD\"] = \"code_challenge_method\";\r\n    AADServerParamKeys[\"CODE_VERIFIER\"] = \"code_verifier\";\r\n    AADServerParamKeys[\"CLIENT_REQUEST_ID\"] = \"client-request-id\";\r\n    AADServerParamKeys[\"X_CLIENT_SKU\"] = \"x-client-SKU\";\r\n    AADServerParamKeys[\"X_CLIENT_VER\"] = \"x-client-Ver\";\r\n    AADServerParamKeys[\"POST_LOGOUT_URI\"] = \"post_logout_redirect_uri\";\r\n})(AADServerParamKeys || (AADServerParamKeys = {}));\r\n/**\r\n * IdToken claim string constants\r\n */\r\nvar IdTokenClaimName;\r\n(function (IdTokenClaimName) {\r\n    IdTokenClaimName[\"ISSUER\"] = \"iss\";\r\n    IdTokenClaimName[\"OBJID\"] = \"oid\";\r\n    IdTokenClaimName[\"SUBJECT\"] = \"sub\";\r\n    IdTokenClaimName[\"TENANTID\"] = \"tid\";\r\n    IdTokenClaimName[\"VERSION\"] = \"ver\";\r\n    IdTokenClaimName[\"PREF_USERNAME\"] = \"preferred_username\";\r\n    IdTokenClaimName[\"NAME\"] = \"name\";\r\n    IdTokenClaimName[\"NONCE\"] = \"nonce\";\r\n    IdTokenClaimName[\"EXPIRATION\"] = \"exp\";\r\n    IdTokenClaimName[\"HOME_OBJID\"] = \"home_oid\";\r\n    IdTokenClaimName[\"SESSIONID\"] = \"sid\";\r\n    IdTokenClaimName[\"CLOUD_INSTANCE_HOSTNAME\"] = \"cloud_instance_host_name\";\r\n})(IdTokenClaimName || (IdTokenClaimName = {}));\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nvar PromptState = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n};\r\n/**\r\n * SSO Types - generated to populate hints\r\n */\r\nvar SSOTypes;\r\n(function (SSOTypes) {\r\n    SSOTypes[\"ACCOUNT\"] = \"account\";\r\n    SSOTypes[\"SID\"] = \"sid\";\r\n    SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\r\n    SSOTypes[\"ID_TOKEN\"] = \"id_token\";\r\n    SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\r\n    SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\r\n    SSOTypes[\"CONSUMERS\"] = \"consumers\";\r\n    SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\r\n    SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\r\n})(SSOTypes || (SSOTypes = {}));\r\n/**\r\n * Disallowed extra query parameters.\r\n */\r\nvar BlacklistedEQParams = [\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The CacheHelpers class contains a set of helper functions used by the module to manage cache items.\r\n */\r\nvar CacheHelpers = /** @class */ (function () {\r\n    function CacheHelpers(cacheImpl) {\r\n        this.cacheStorage = cacheImpl;\r\n    }\r\n    /**\r\n     * Create acquireTokenAccountKey to cache account object\r\n     * @param accountId\r\n     * @param state\r\n     */\r\n    CacheHelpers.prototype.generateAcquireTokenAccountKey = function (accountId) {\r\n        return \"\" + TemporaryCacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants.RESOURCE_DELIM + accountId;\r\n    };\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    CacheHelpers.prototype.generateAuthorityKey = function (state) {\r\n        return \"\" + TemporaryCacheKeys.AUTHORITY + Constants.RESOURCE_DELIM + state;\r\n    };\r\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */\r\n    CacheHelpers.prototype.generateNonceKey = function (state) {\r\n        return \"\" + TemporaryCacheKeys.NONCE_IDTOKEN + Constants.RESOURCE_DELIM + state;\r\n    };\r\n    /**\r\n     * Sets the cachekeys for and stores the account information in cache\r\n     * @param account\r\n     * @param state\r\n     */\r\n    CacheHelpers.prototype.setAccountCache = function (account) {\r\n        // Cache acquireTokenAccountKey\r\n        var accountId = account && account.homeAccountIdentifier ? account.homeAccountIdentifier : Constants.NO_ACCOUNT;\r\n        var acquireTokenAccountKey = this.generateAcquireTokenAccountKey(accountId);\r\n        this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));\r\n    };\r\n    /**\r\n     * Sets the cacheKey for and stores the authority information in cache\r\n     * @param state\r\n     * @param authority\r\n     */\r\n    CacheHelpers.prototype.setAuthorityCache = function (authority, state) {\r\n        // Cache authorityKey\r\n        var authorityKey = this.generateAuthorityKey(state);\r\n        this.cacheStorage.setItem(authorityKey, authority.canonicalAuthority);\r\n    };\r\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */\r\n    CacheHelpers.prototype.updateCacheEntries = function (serverAuthenticationRequest, account) {\r\n        // Cache account and state\r\n        if (account) {\r\n            this.setAccountCache(account);\r\n        }\r\n        // Cache the request state\r\n        this.cacheStorage.setItem(TemporaryCacheKeys.REQUEST_STATE, serverAuthenticationRequest.state);\r\n        // Cache the nonce\r\n        this.cacheStorage.setItem(this.generateNonceKey(serverAuthenticationRequest.state), serverAuthenticationRequest.nonce);\r\n        // Cache authorityKey\r\n        this.setAuthorityCache(serverAuthenticationRequest.authorityInstance, serverAuthenticationRequest.state);\r\n    };\r\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */\r\n    CacheHelpers.prototype.resetTempCacheItems = function (state) {\r\n        var _this = this;\r\n        // check state and remove associated cache items\r\n        this.cacheStorage.getKeys().forEach(function (key) {\r\n            if (!StringUtils.isEmpty(state) && key.indexOf(state) !== -1) {\r\n                var splitKey = key.split(Constants.RESOURCE_DELIM);\r\n                var keyState = splitKey.length > 1 ? splitKey[splitKey.length - 1] : null;\r\n                if (keyState === state) {\r\n                    _this.cacheStorage.removeItem(key);\r\n                }\r\n            }\r\n        });\r\n        // delete generic interactive request parameters\r\n        this.cacheStorage.removeItem(TemporaryCacheKeys.REQUEST_STATE);\r\n        this.cacheStorage.removeItem(TemporaryCacheKeys.ORIGIN_URI);\r\n        this.cacheStorage.removeItem(TemporaryCacheKeys.REDIRECT_REQUEST);\r\n    };\r\n    /**\r\n     * Get all access tokens in the cache\r\n     * @param clientId\r\n     * @param homeAccountIdentifier\r\n     */\r\n    CacheHelpers.prototype.getAllAccessTokens = function (clientId, authority, resource, homeAccountIdentifier) {\r\n        var _this = this;\r\n        var results = this.cacheStorage.getKeys().reduce(function (tokens, key) {\r\n            var keyMatches = key.match(clientId) && key.match(authority) && key.match(resource) && key.match(homeAccountIdentifier);\r\n            if (keyMatches) {\r\n                var value = _this.cacheStorage.getItem(key);\r\n                if (value) {\r\n                    try {\r\n                        var parseAtKey = JSON.parse(key);\r\n                        var newAccessTokenCacheItem = new AccessTokenCacheItem(parseAtKey, JSON.parse(value));\r\n                        return tokens.concat([newAccessTokenCacheItem]);\r\n                    }\r\n                    catch (e) {\r\n                        throw ClientAuthError.createCacheParseError(key);\r\n                    }\r\n                }\r\n            }\r\n            return tokens;\r\n        }, []);\r\n        return results;\r\n    };\r\n    /**\r\n     * Remove all access tokens in the cache\r\n     * @param clientId\r\n     * @param homeAccountIdentifier\r\n     */\r\n    CacheHelpers.prototype.removeAllAccessTokens = function (clientId, authority, resource, homeAccountIdentifier) {\r\n        var _this = this;\r\n        this.cacheStorage.getKeys().forEach(function (key) {\r\n            var keyMatches = key.match(clientId) && key.match(authority) && key.match(resource) && key.match(homeAccountIdentifier);\r\n            if (keyMatches) {\r\n                _this.cacheStorage.removeItem(key);\r\n            }\r\n        });\r\n    };\r\n    return CacheHelpers;\r\n}());\n\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\r\nvar Account = /** @class */ (function () {\r\n    /**\r\n     * Creates an Account Object\r\n     * @praram accountIdentifier\r\n     * @param homeAccountIdentifier\r\n     * @param userName\r\n     * @param name\r\n     * @param idToken\r\n     * @param sid\r\n     * @param environment\r\n     */\r\n    function Account(accountIdentifier, homeAccountIdentifier, idTokenClaims, rawIdToken) {\r\n        this.accountIdentifier = accountIdentifier;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n        this.userName = idTokenClaims.preferred_username;\r\n        this.name = idTokenClaims.name;\r\n        // will be deprecated soon\r\n        this.idToken = rawIdToken;\r\n        this.idTokenClaims = idTokenClaims;\r\n        this.sid = idTokenClaims.sid;\r\n        this.environment = idTokenClaims.iss;\r\n    }\r\n    /**\r\n     * @param idToken\r\n     * @param clientInfo\r\n     */\r\n    Account.createAccount = function (idToken, clientInfo, crypto) {\r\n        // create accountIdentifier\r\n        var accountIdentifier = idToken.claims.oid || idToken.claims.sub;\r\n        // create homeAccountIdentifier\r\n        var uid = clientInfo ? clientInfo.uid : \"\";\r\n        var utid = clientInfo ? clientInfo.utid : \"\";\r\n        var homeAccountIdentifier;\r\n        if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\r\n            homeAccountIdentifier = crypto.base64Encode(uid) + \".\" + crypto.base64Encode(utid);\r\n        }\r\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.claims, idToken.rawIdToken);\r\n    };\r\n    /**\r\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n     *\r\n     * @param a1: Account object\r\n     * @param a2: Account object\r\n     */\r\n    Account.compareAccounts = function (a1, a2) {\r\n        if (!(a1 && a1.homeAccountIdentifier) || !(a2 && a2.homeAccountIdentifier)) {\r\n            return false;\r\n        }\r\n        return a1.homeAccountIdentifier === a2.homeAccountIdentifier;\r\n    };\r\n    return Account;\r\n}());\n\n/**\r\n * Id Token representation class. Parses id token string and generates claims object.\r\n */\r\nvar IdToken = /** @class */ (function () {\r\n    function IdToken(rawIdToken, crypto) {\r\n        if (StringUtils.isEmpty(rawIdToken)) {\r\n            throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\r\n        }\r\n        this.rawIdToken = rawIdToken;\r\n        this.claims = IdToken.extractIdToken(rawIdToken, crypto);\r\n    }\r\n    /**\r\n     * Extract IdToken by decoding the RAWIdToken\r\n     *\r\n     * @param encodedIdToken\r\n     */\r\n    IdToken.extractIdToken = function (encodedIdToken, crypto) {\r\n        // id token will be decoded to get the username\r\n        var decodedToken = StringUtils.decodeJwt(encodedIdToken);\r\n        if (!decodedToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            var base64IdToken = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64IdToken);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createIdTokenParsingError(JSON.stringify(err));\r\n        }\r\n    };\r\n    return IdToken;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, crypto) {\r\n    if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError(rawClientInfo);\r\n    }\r\n    try {\r\n        var decodedClientInfo = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError(e);\r\n    }\r\n}\n\nvar name = \"@azure/msal-common\";\nvar author = {\n\tname: \"Microsoft\",\n\temail: \"nugetaad@microsoft.com\",\n\turl: \"https://www.microsoft.com\"\n};\nvar license = \"MIT\";\nvar repository = {\n\ttype: \"git\",\n\turl: \"https://github.com/AzureAD/microsoft-authentication-library-for-js.git\"\n};\nvar version = \"1.0.0-alpha.0\";\nvar description = \"Microsoft Authentication Library for js\";\nvar keywords = [\n\t\"implicit\",\n\t\"authorization code\",\n\t\"PKCE\",\n\t\"js\",\n\t\"AAD\",\n\t\"msal\",\n\t\"oauth\"\n];\nvar main = \"./dist/index.js\";\nvar module = \"./dist/index.es.js\";\nvar types = \"./dist/src/index.d.ts\";\nvar browserslist = [\n\t\"last 1 version\",\n\t\"> 1%\",\n\t\"maintained node versions\",\n\t\"not dead\"\n];\nvar engines = {\n\tnode: \">=0.8.0\"\n};\nvar directories = {\n\ttest: \"test\"\n};\nvar files = [\n\t\"dist\"\n];\nvar scripts = {\n\tclean: \"shx rm -rf dist lib\",\n\t\"clean:coverage\": \"rimraf ../../.nyc_output/*\",\n\tlint: \"eslint src --ext .ts\",\n\ttest: \"mocha\",\n\t\"test:coverage\": \"nyc --reporter=text mocha\",\n\t\"test:coverage:only\": \"npm run clean:coverage && npm run test:coverage\",\n\t\"build:modules\": \"rollup -c\",\n\t\"build:modules:watch\": \"rollup -cw\",\n\tbuild: \"npm run clean && npm run lint && npm run build:modules\",\n\tprepack: \"npm run build\"\n};\nvar devDependencies = {\n\t\"@babel/core\": \"^7.7.2\",\n\t\"@babel/plugin-proposal-class-properties\": \"^7.7.0\",\n\t\"@babel/plugin-proposal-object-rest-spread\": \"^7.6.2\",\n\t\"@babel/polyfill\": \"^7.7.0\",\n\t\"@babel/preset-env\": \"^7.7.1\",\n\t\"@babel/preset-typescript\": \"^7.7.2\",\n\t\"@babel/register\": \"^7.7.0\",\n\t\"@istanbuljs/nyc-config-babel\": \"^2.1.1\",\n\t\"@rollup/plugin-json\": \"^4.0.0\",\n\t\"@types/chai\": \"^4.2.5\",\n\t\"@types/chai-as-promised\": \"^7.1.2\",\n\t\"@types/mocha\": \"^5.2.7\",\n\t\"@types/sinon\": \"^7.5.0\",\n\t\"@typescript-eslint/eslint-plugin\": \"^2.4.0\",\n\t\"@typescript-eslint/eslint-plugin-tslint\": \"^2.4.0\",\n\t\"@typescript-eslint/parser\": \"^2.4.0\",\n\t\"babel-plugin-istanbul\": \"^5.2.0\",\n\tchai: \"^4.2.0\",\n\t\"chai-as-promised\": \"^7.1.1\",\n\teslint: \"^6.5.1\",\n\thusky: \"^3.0.9\",\n\tmocha: \"^6.2.2\",\n\tnyc: \"^14.1.1\",\n\trimraf: \"^3.0.0\",\n\trollup: \"^1.24.0\",\n\t\"rollup-plugin-typescript2\": \"^0.24.3\",\n\t\"rollup-plugin-uglify\": \"^6.0.3\",\n\tshx: \"^0.3.2\",\n\tsinon: \"^7.5.0\",\n\ttslib: \"^1.10.0\",\n\ttslint: \"^5.20.0\",\n\ttypescript: \"^3.6.4\"\n};\nvar dependencies = {\n};\nvar pkg = {\n\tname: name,\n\tauthor: author,\n\tlicense: license,\n\trepository: repository,\n\tversion: version,\n\tdescription: description,\n\tkeywords: keywords,\n\tmain: main,\n\tmodule: module,\n\ttypes: types,\n\tbrowserslist: browserslist,\n\tengines: engines,\n\tdirectories: directories,\n\tfiles: files,\n\tscripts: scripts,\n\tdevDependencies: devDependencies,\n\tdependencies: dependencies\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(loggerOptions) {\r\n        // Current log level, defaults to info.\r\n        this.level = LogLevel.Info;\r\n        if (loggerOptions) {\r\n            this.localCallback = loggerOptions.loggerCallback;\r\n            this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled;\r\n        }\r\n    }\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    Logger.prototype.logMessage = function (logMessage, options) {\r\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        var timestamp = new Date().toUTCString();\r\n        var log;\r\n        if (!StringUtils.isEmpty(this.correlationId)) {\r\n            log = timestamp + \":\" + this.correlationId + \"-\" + pkg.version + \"-\" + LogLevel[options.logLevel] + \" \" + logMessage;\r\n        }\r\n        else {\r\n            log = timestamp + \":\" + pkg.version + \"-\" + LogLevel[options.logLevel] + \" \" + logMessage;\r\n        }\r\n        this.executeCallback(options.logLevel, log, options.containsPii);\r\n    };\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    Logger.prototype.executeCallback = function (level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    };\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    Logger.prototype.error = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    Logger.prototype.errorPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    Logger.prototype.warning = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    Logger.prototype.warningPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    Logger.prototype.info = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    Logger.prototype.infoPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    Logger.prototype.verbose = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    Logger.prototype.verbosePii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    Logger.prototype.isPiiLoggingEnabled = function () {\r\n        return this.piiLoggingEnabled;\r\n    };\r\n    return Logger;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthModule class\r\n *\r\n * Parent object instance which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n *\r\n */\r\nvar AuthModule = /** @class */ (function () {\r\n    function AuthModule(configuration) {\r\n        // Set the configuration\r\n        this.config = buildModuleConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions);\r\n        // Initialize crypto\r\n        this.cryptoObj = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheStorage = this.config.storageInterface;\r\n        // Initialize storage helper object\r\n        this.cacheManager = new CacheHelpers(this.cacheStorage);\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n    }\r\n    // #endregion\r\n    // #region Getters and Setters\r\n    /**\r\n     * Returns the signed in account\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no state is found\r\n     * @returns {@link Account} - the account object stored in MSAL\r\n     */\r\n    AuthModule.prototype.getAccount = function () {\r\n        if (this.account) {\r\n            return this.account;\r\n        }\r\n        // Get id token and client info from cache\r\n        var rawIdToken = this.cacheStorage.getItem(PersistentCacheKeys.ID_TOKEN);\r\n        var rawClientInfo = this.cacheStorage.getItem(PersistentCacheKeys.CLIENT_INFO);\r\n        if (!StringUtils.isEmpty(rawIdToken) && !StringUtils.isEmpty(rawClientInfo)) {\r\n            var idToken = new IdToken(rawIdToken, this.cryptoObj);\r\n            var clientInfo = buildClientInfo(rawClientInfo, this.cryptoObj);\r\n            this.account = Account.createAccount(idToken, clientInfo, this.cryptoObj);\r\n            return this.account;\r\n        }\r\n        // if login is not yet done, return null\r\n        return null;\r\n    };\r\n    return AuthModule;\r\n}());\n\nvar DEFAULT_AUTH_OPTIONS = {\r\n    clientId: \"\",\r\n    // Temporary until server allows CORS for public clients\r\n    tmp_clientSecret: \"\",\r\n    authority: null,\r\n    validateAuthority: true,\r\n    redirectUri: \"\",\r\n    postLogoutRedirectUri: \"\"\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TAuthOptions\r\n * @param TStorageOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n *\r\n * @returns TConfiguration object\r\n */\r\nfunction buildPublicClientSPAConfiguration(_a) {\r\n    var auth = _a.auth, loggerOptions = _a.loggerOptions, storageInterface = _a.storageInterface, networkInterface = _a.networkInterface, cryptoInterface = _a.cryptoInterface;\r\n    var baseConfig = buildModuleConfiguration({ loggerOptions: loggerOptions, storageInterface: storageInterface, networkInterface: networkInterface, cryptoInterface: cryptoInterface });\r\n    var overlayedConfig = __assign({ auth: __assign(__assign({}, DEFAULT_AUTH_OPTIONS), auth) }, baseConfig);\r\n    return overlayedConfig;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base abstract class for server request params class which validates request parameters, checks for SSO, and returns URL or request body content.\r\n */\r\nvar ServerRequestParameters = /** @class */ (function () {\r\n    function ServerRequestParameters(clientId, redirectUri, cryptoImpl) {\r\n        this.clientId = clientId;\r\n        this.cryptoObj = cryptoImpl;\r\n        this.redirectUri = redirectUri;\r\n        // Telemetry Info\r\n        this.xClientSku = Constants.LIBRARY_NAME;\r\n        this.xClientVer = pkg.version;\r\n    }\r\n    return ServerRequestParameters;\r\n}());\n\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\r\n    },\r\n    urlParseError: {\r\n        code: \"url_parse_error\",\r\n        desc: \"URL could not be parsed into appropriate segments.\"\r\n    },\r\n    urlEmptyError: {\r\n        code: \"empty_url_error\",\r\n        desc: \"URL was empty or null.\"\r\n    },\r\n    scopesRequiredError: {\r\n        code: \"scopes_required\",\r\n        desc: \"Scopes are required to obtain an access token.\"\r\n    },\r\n    emptyScopesError: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as empty array.\"\r\n    },\r\n    nonArrayScopesError: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientIdSingleScopeError: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent' and 'none'.  Please see here for valid configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: \"token_request_empty\",\r\n        desc: \"Token request was empty and not found in cache.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nvar ClientConfigurationError = /** @class */ (function (_super) {\r\n    __extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the claims request could not be successfully parsed\r\n     */\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if authority uri is given an insecure protocol.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string does not parse into separate segments.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlParseError = function (urlParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string is empty or null.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when input scopes are required.\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createScopesRequiredError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.scopesRequiredError.code, ClientConfigurationErrorMessage.scopesRequiredError.desc + \" Given Scopes: \" + inputScopes);\r\n    };\r\n    /**\r\n     * Error thrown when scopes are not an array\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createScopesNonArrayError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopesError.code, ClientConfigurationErrorMessage.nonArrayScopesError.desc + \" Given Scopes: \" + inputScopes.toString());\r\n    };\r\n    /**\r\n     * Error thrown when scopes are empty.\r\n     * @param scopesValue\r\n     */\r\n    ClientConfigurationError.createEmptyScopesArrayError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, ClientConfigurationErrorMessage.emptyScopesError.desc + \" Given Scopes: \" + inputScopes.toString());\r\n    };\r\n    /**\r\n     * Error thrown when client id scope is not provided as single scope.\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes.toString());\r\n    };\r\n    /**\r\n     * Error thrown when prompt is not an allowed type.\r\n     * @param promptValue\r\n     */\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyTokenRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError));\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings to ensure uniqueness of strings.\r\n */\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet(inputScopes, appClientId, scopesRequired) {\r\n        this.clientId = appClientId;\r\n        this.scopesRequired = scopesRequired;\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(inputScopes);\r\n        var scopeArr = inputScopes ? StringUtils.trimAndConvertArrayEntriesToLowerCase(__spreadArrays(inputScopes)) : [];\r\n        this.scopes = new Set(scopeArr);\r\n        this.originalScopes = new Set(this.scopes);\r\n        if (!this.scopesRequired) {\r\n            this.appendScope(this.clientId);\r\n        }\r\n        this.replaceDefaultScopes();\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    ScopeSet.fromString = function (inputScopeString, appClientId, scopesRequired) {\r\n        var inputScopes = inputScopeString.split(\" \");\r\n        return new ScopeSet(inputScopes, appClientId, scopesRequired);\r\n    };\r\n    /**\r\n     * Replace client id with the default scopes used for token acquisition.\r\n     */\r\n    ScopeSet.prototype.replaceDefaultScopes = function () {\r\n        if (this.scopes.has(this.clientId)) {\r\n            this.removeScope(this.clientId);\r\n            this.appendScope(Constants.OPENID_SCOPE);\r\n            this.appendScope(Constants.PROFILE_SCOPE);\r\n        }\r\n        this.appendScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n    };\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    ScopeSet.prototype.validateInputScopes = function (inputScopes) {\r\n        if (this.scopesRequired) {\r\n            // Scopes are required but not given\r\n            if (!inputScopes) {\r\n                throw ClientConfigurationError.createScopesRequiredError(inputScopes);\r\n            }\r\n            // Check that scopes is not an empty array\r\n            if (inputScopes.length < 1) {\r\n                throw ClientConfigurationError.createEmptyScopesArrayError(inputScopes);\r\n            }\r\n        }\r\n        // Check that scopes is an array object\r\n        if (inputScopes && !Array.isArray(inputScopes)) {\r\n            throw ClientConfigurationError.createScopesNonArrayError(inputScopes);\r\n        }\r\n    };\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.containsScope = function (scope) {\r\n        return this.scopes.has(scope);\r\n    };\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    ScopeSet.prototype.containsScopeSet = function (scopeSet) {\r\n        var _this = this;\r\n        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); });\r\n    };\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    ScopeSet.prototype.appendScope = function (newScope) {\r\n        this.scopes.add(newScope);\r\n    };\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    ScopeSet.prototype.appendScopes = function (newScopes) {\r\n        var newScopeSet = new ScopeSet(newScopes, this.clientId, false);\r\n        this.scopes = this.unionScopeSets(newScopeSet);\r\n    };\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.removeScope = function (scope) {\r\n        this.scopes.delete(scope);\r\n    };\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.unionScopeSets = function (otherScopes) {\r\n        return new Set(__spreadArrays(otherScopes.asArray(), Array.from(this.scopes)));\r\n    };\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\r\n        return this.unionScopeSets(otherScopes).size < (this.scopes.size + otherScopes.getScopeCount());\r\n    };\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    ScopeSet.prototype.getScopeCount = function () {\r\n        return this.scopes.size;\r\n    };\r\n    /**\r\n     * Returns true if the set of original scopes only contained client-id\r\n     */\r\n    ScopeSet.prototype.isLoginScopeSet = function () {\r\n        var hasLoginScopes = (this.originalScopes.has(this.clientId) ||\r\n            this.originalScopes.has(Constants.OPENID_SCOPE) ||\r\n            this.originalScopes.has(Constants.PROFILE_SCOPE));\r\n        return this.originalScopes && hasLoginScopes;\r\n    };\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    ScopeSet.prototype.asArray = function () {\r\n        return Array.from(this.scopes);\r\n    };\r\n    /**\r\n     * Returns the original scopes as an array (no extra scopes to consent)\r\n     */\r\n    ScopeSet.prototype.getOriginalScopesAsArray = function () {\r\n        return Array.from(this.originalScopes);\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    ScopeSet.prototype.printScopes = function () {\r\n        if (this.scopes) {\r\n            var scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return \"\";\r\n    };\r\n    return ScopeSet;\r\n}());\n\n/**\r\n * Function which validates claims request passed in by the user.\r\n * @param request\r\n */\r\nfunction validateClaimsRequest(request) {\r\n    if (!request.claimsRequest) {\r\n        return;\r\n    }\r\n    try {\r\n        JSON.parse(request.claimsRequest);\r\n    }\r\n    catch (e) {\r\n        throw ClientConfigurationError.createClaimsRequestParsingError(e);\r\n    }\r\n    // TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nvar ProtocolUtils = /** @class */ (function () {\r\n    function ProtocolUtils() {\r\n    }\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    ProtocolUtils.setRequestState = function (userState, randomGuid) {\r\n        return userState && !StringUtils.isEmpty(userState) ? \"\" + randomGuid + Constants.RESOURCE_DELIM + userState : randomGuid;\r\n    };\r\n    /**\r\n     *\r\n     * Extracts user state value from the state sent with the authentication request.\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    ProtocolUtils.getUserRequestState = function (serverResponseState) {\r\n        if (serverResponseState) {\r\n            var splitIndex = serverResponseState.indexOf(Constants.RESOURCE_DELIM);\r\n            if (splitIndex > -1 && splitIndex + 1 < serverResponseState.length) {\r\n                return serverResponseState.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return \"\";\r\n    };\r\n    return ProtocolUtils;\r\n}());\n\n/**\r\n * This class extends the ServerRequestParameters class. This class validates URL request parameters, checks for SSO and generates required URL.\r\n */\r\nvar ServerCodeRequestParameters = /** @class */ (function (_super) {\r\n    __extends(ServerCodeRequestParameters, _super);\r\n    function ServerCodeRequestParameters(authority, clientId, userRequest, cachedAccount, redirectUri, cryptoImpl, isLoginCall) {\r\n        var _this = _super.call(this, clientId, redirectUri, cryptoImpl) || this;\r\n        _this.authorityInstance = authority;\r\n        _this.userRequest = userRequest;\r\n        _this.responseType = Constants.CODE_RESPONSE_TYPE;\r\n        _this.account = (userRequest && userRequest.account) || cachedAccount;\r\n        // Set scopes, append extra scopes if there is a login call.\r\n        _this.scopes = new ScopeSet(_this.userRequest && _this.userRequest.scopes, _this.clientId, !isLoginCall);\r\n        if (isLoginCall) {\r\n            _this.appendExtraScopes();\r\n        }\r\n        // Set random vars\r\n        var randomGuid = _this.cryptoObj.createNewGuid();\r\n        _this.state = ProtocolUtils.setRequestState(_this.userRequest && _this.userRequest.userRequestState, randomGuid);\r\n        _this.nonce = _this.cryptoObj.createNewGuid();\r\n        _this.correlationId = _this.userRequest.correlationId || _this.cryptoObj.createNewGuid();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Appends extraScopesToConsent if passed\r\n     */\r\n    ServerCodeRequestParameters.prototype.appendExtraScopes = function () {\r\n        if (this.userRequest && this.scopes) {\r\n            if (this.userRequest.extraScopesToConsent) {\r\n                this.scopes.appendScopes(this.userRequest.extraScopesToConsent);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check to see if there are SSO params set in the Request\r\n     * @param request\r\n     */\r\n    ServerCodeRequestParameters.prototype.hasSSOParam = function () {\r\n        var isSSORequest = this.userRequest && (this.account || this.userRequest.sid || this.userRequest.loginHint);\r\n        return !!this.account || !!isSSORequest;\r\n    };\r\n    /**\r\n     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\r\n     * @param adalIdTokenObject\r\n     */\r\n    ServerCodeRequestParameters.prototype.populateQueryParams = function (adalIdTokenObject) {\r\n        var queryParameters = {};\r\n        if (this.userRequest) {\r\n            // add the prompt parameter to serverRequestParameters if passed\r\n            if (this.userRequest.prompt) {\r\n                this.validatePromptParameter(this.userRequest.prompt);\r\n            }\r\n            // Add claims challenge to serverRequestParameters if passed\r\n            if (this.userRequest.claimsRequest) {\r\n                validateClaimsRequest(this.userRequest);\r\n            }\r\n            // if the developer provides one of these, give preference to developer choice\r\n            if (this.hasSSOParam()) {\r\n                queryParameters = this.constructUnifiedCacheQueryParameter(null);\r\n            }\r\n        }\r\n        // ADAL token SSO\r\n        if (adalIdTokenObject) {\r\n            queryParameters = this.constructUnifiedCacheQueryParameter(adalIdTokenObject);\r\n        }\r\n        /*\r\n         * adds sid/login_hint if not populated; populates domain_hint\r\n         * this.logger.verbose(\"Calling addHint parameters\");\r\n         */\r\n        queryParameters = this.addHintParameters(queryParameters);\r\n        // sanity check for developer passed extraQueryParameters\r\n        var eQParams;\r\n        if (this.userRequest) {\r\n            eQParams = this.sanitizeEQParams(this.userRequest);\r\n        }\r\n        // Populate the extraQueryParameters to be sent to the server\r\n        this.queryParameters = this.generateQueryParametersString(queryParameters);\r\n        this.extraQueryParameters = this.generateQueryParametersString(eQParams);\r\n    };\r\n    /**\r\n     * Create navigation url.\r\n     */\r\n    ServerCodeRequestParameters.prototype.createNavigateUrl = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var str, authEndpoint, requestUrl;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.createParamString()];\r\n                    case 1:\r\n                        str = _a.sent();\r\n                        authEndpoint = this.authorityInstance.authorizationEndpoint;\r\n                        // if the endpoint already has queryparams, lets add to it, otherwise add the first one\r\n                        if (authEndpoint.indexOf(\"?\") < 0) {\r\n                            authEndpoint += \"?\";\r\n                        }\r\n                        else {\r\n                            authEndpoint += \"&\";\r\n                        }\r\n                        requestUrl = \"\" + authEndpoint + str.join(\"&\");\r\n                        return [2 /*return*/, requestUrl];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create a query parameter string.\r\n     */\r\n    ServerCodeRequestParameters.prototype.createParamString = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var str, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        str = [];\r\n                        str.push(AADServerParamKeys.RESPONSE_TYPE + \"=\" + this.responseType);\r\n                        str.push(AADServerParamKeys.SCOPE + \"=\" + encodeURIComponent(this.scopes.printScopes()));\r\n                        str.push(AADServerParamKeys.CLIENT_ID + \"=\" + encodeURIComponent(this.clientId));\r\n                        str.push(AADServerParamKeys.REDIRECT_URI + \"=\" + encodeURIComponent(this.redirectUri));\r\n                        str.push(AADServerParamKeys.STATE + \"=\" + encodeURIComponent(this.state));\r\n                        str.push(AADServerParamKeys.NONCE + \"=\" + encodeURIComponent(this.nonce));\r\n                        str.push(AADServerParamKeys.CLIENT_INFO + \"=1\");\r\n                        str.push(AADServerParamKeys.X_CLIENT_SKU + \"=\" + this.xClientSku);\r\n                        str.push(AADServerParamKeys.X_CLIENT_VER + \"=\" + this.xClientVer);\r\n                        // Add codes here. May want to add optional step to allow for non-PKCE auth code flows\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.cryptoObj.generatePkceCodes()];\r\n                    case 1:\r\n                        // Add codes here. May want to add optional step to allow for non-PKCE auth code flows\r\n                        _a.generatedPkce = _b.sent();\r\n                        str.push(AADServerParamKeys.CODE_CHALLENGE + \"=\" + encodeURIComponent(this.generatedPkce.challenge));\r\n                        str.push(AADServerParamKeys.CODE_CHALLENGE_METHOD + \"=\" + Constants.S256_CODE_CHALLENGE_METHOD);\r\n                        // Append resource\r\n                        if (this.userRequest && this.userRequest.resource) {\r\n                            str.push(AADServerParamKeys.RESOURCE + \"=\" + encodeURIComponent(this.userRequest.resource));\r\n                        }\r\n                        // Append prompt\r\n                        if (this.userRequest && this.userRequest.prompt) {\r\n                            str.push(AADServerParamKeys.PROMPT + \"=\" + (encodeURIComponent(this.userRequest.prompt)));\r\n                        }\r\n                        // Append claims request\r\n                        if (this.userRequest && this.userRequest.claimsRequest) {\r\n                            str.push(AADServerParamKeys.CLAIMS + \"=\" + encodeURIComponent(this.userRequest.claimsRequest));\r\n                        }\r\n                        // Append query params\r\n                        if (this.queryParameters) {\r\n                            str.push(this.queryParameters);\r\n                        }\r\n                        // Append extra query params\r\n                        if (this.extraQueryParameters) {\r\n                            str.push(this.extraQueryParameters);\r\n                        }\r\n                        str.push(AADServerParamKeys.CLIENT_REQUEST_ID + \"=\" + encodeURIComponent(this.correlationId));\r\n                        str.push(AADServerParamKeys.RESPONSE_MODE + \"=\" + Constants.FRAGMENT_RESPONSE_MODE);\r\n                        return [2 /*return*/, str];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Utility to test if valid prompt value is passed in the request\r\n     * @param request\r\n     */\r\n    ServerCodeRequestParameters.prototype.validatePromptParameter = function (prompt) {\r\n        if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    /**\r\n     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\r\n     * in any login() or acquireToken() calls\r\n     * @param idTokenObject\r\n     * @param extraQueryParameters\r\n     * @param sid\r\n     * @param loginHint\r\n     */\r\n    // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\r\n    ServerCodeRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (idTokenObject) {\r\n        // preference order: account > sid > login_hint\r\n        var ssoType;\r\n        var ssoData;\r\n        var serverReqParam = {};\r\n        // if account info is passed, account.sid > account.login_hint\r\n        if (this.userRequest) {\r\n            if (this.account) {\r\n                var account = this.account;\r\n                if (account.sid) {\r\n                    ssoType = SSOTypes.SID;\r\n                    ssoData = account.sid;\r\n                }\r\n                else if (account.userName) {\r\n                    ssoType = SSOTypes.LOGIN_HINT;\r\n                    ssoData = account.userName;\r\n                }\r\n            }\r\n            // sid from request\r\n            else if (this.userRequest.sid) {\r\n                ssoType = SSOTypes.SID;\r\n                ssoData = this.userRequest.sid;\r\n            }\r\n            // loginHint from request\r\n            else if (this.userRequest.loginHint) {\r\n                ssoType = SSOTypes.LOGIN_HINT;\r\n                ssoData = this.userRequest.loginHint;\r\n            }\r\n        }\r\n        // adalIdToken retrieved from cache\r\n        else if (idTokenObject) {\r\n            if (idTokenObject.claims && idTokenObject.claims.preferred_username) {\r\n                ssoType = SSOTypes.ID_TOKEN;\r\n                ssoData = idTokenObject.claims.preferred_username;\r\n            }\r\n            else {\r\n                ssoType = SSOTypes.ORGANIZATIONS;\r\n                ssoData = null;\r\n            }\r\n        }\r\n        serverReqParam = this.addSSOParameter(ssoType, ssoData);\r\n        // add the HomeAccountIdentifier info/ domain_hint\r\n        if (this.account && this.account.homeAccountIdentifier) {\r\n            serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, this.account.homeAccountIdentifier, serverReqParam);\r\n        }\r\n        return serverReqParam;\r\n    };\r\n    /**\r\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\r\n     * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\r\n     * domain_req utid received as part of the clientInfo\r\n     * login_req uid received as part of clientInfo\r\n     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\r\n     *\r\n     * @param {@link Account} account - Account for which the token is requested\r\n     * @param queryparams\r\n     * @param {@link ServerRequestParameters}\r\n     */\r\n    ServerCodeRequestParameters.prototype.addHintParameters = function (qParams) {\r\n        /*\r\n         * This is a final check for all queryParams added so far; preference order: sid > login_hint\r\n         * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\r\n         */\r\n        if (this.account && !qParams[SSOTypes.SID]) {\r\n            // sid - populate only if login_hint is not already populated and the account has sid\r\n            var populateSID = !qParams[SSOTypes.LOGIN_HINT] && this.account.sid && this.userRequest.prompt === PromptState.NONE;\r\n            if (populateSID) {\r\n                qParams = this.addSSOParameter(SSOTypes.SID, this.account.sid, qParams);\r\n            }\r\n            // login_hint - account.userName\r\n            else {\r\n                var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && this.account.userName && !StringUtils.isEmpty(this.account.userName);\r\n                if (populateLoginHint) {\r\n                    qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, this.account.userName, qParams);\r\n                }\r\n            }\r\n        }\r\n        return qParams;\r\n    };\r\n    /**\r\n     * Add SID to extraQueryParameters\r\n     * @param sid\r\n     */\r\n    ServerCodeRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\r\n        if (!ssoParam) {\r\n            ssoParam = {};\r\n        }\r\n        if (!ssoData) {\r\n            return ssoParam;\r\n        }\r\n        switch (ssoType) {\r\n            case SSOTypes.SID: {\r\n                ssoParam[SSOTypes.SID] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.ID_TOKEN: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case SSOTypes.LOGIN_HINT: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.ORGANIZATIONS: {\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case SSOTypes.CONSUMERS: {\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\r\n                break;\r\n            }\r\n            case SSOTypes.HOMEACCOUNT_ID: {\r\n                var homeAccountId = ssoData.split(\".\");\r\n                var utid = this.cryptoObj.base64Decode(homeAccountId[1]);\r\n                if (utid === Constants.CONSUMER_UTID) {\r\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\r\n                }\r\n                else {\r\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ssoParam;\r\n    };\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    ServerCodeRequestParameters.prototype.sanitizeEQParams = function (request) {\r\n        var eQParams = request.extraQueryParameters;\r\n        if (!eQParams) {\r\n            return null;\r\n        }\r\n        if (request.claimsRequest) {\r\n            // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\r\n            delete eQParams[Constants.CLAIMS];\r\n        }\r\n        BlacklistedEQParams.forEach(function (param) {\r\n            if (eQParams[param]) {\r\n                // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\r\n                delete eQParams[param];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    /**\r\n     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\r\n     * @param extraQueryParameters\r\n     */\r\n    ServerCodeRequestParameters.prototype.generateQueryParametersString = function (queryParameters) {\r\n        var paramsString = null;\r\n        if (queryParameters) {\r\n            Object.keys(queryParameters).forEach(function (key) {\r\n                if (paramsString == null) {\r\n                    paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n                else {\r\n                    paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n            });\r\n        }\r\n        return paramsString;\r\n    };\r\n    return ServerCodeRequestParameters;\r\n}(ServerRequestParameters));\n\n/**\r\n * This class extends the ServerRequestParameters class. This class validates token request parameters and generates a form body and headers required for the request.\r\n */\r\nvar ServerTokenRequestParameters = /** @class */ (function (_super) {\r\n    __extends(ServerTokenRequestParameters, _super);\r\n    function ServerTokenRequestParameters(clientId, clientSecret, tokenRequest, codeResponse, redirectUri, cryptoImpl, refreshToken) {\r\n        var _this = _super.call(this, clientId, redirectUri, cryptoImpl) || this;\r\n        _this.clientSecret = clientSecret;\r\n        _this.tokenRequest = tokenRequest;\r\n        _this.codeResponse = codeResponse;\r\n        _this.refreshToken = refreshToken;\r\n        // Set scopes, always required for token request/exchange\r\n        _this.scopes = new ScopeSet(_this.tokenRequest && _this.tokenRequest.scopes, _this.clientId, true);\r\n        // Set correlation id\r\n        _this.correlationId = _this.tokenRequest.correlationId || _this.cryptoObj.createNewGuid();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates headers required for token request.\r\n     */\r\n    ServerTokenRequestParameters.prototype.createRequestHeaders = function () {\r\n        var headers = new Map();\r\n        headers.set(HEADER_NAMES.CONTENT_TYPE, Constants.URL_FORM_CONTENT_TYPE);\r\n        return headers;\r\n    };\r\n    /**\r\n     * Creates string of parameters to send to server in request body.\r\n     */\r\n    ServerTokenRequestParameters.prototype.createRequestBody = function () {\r\n        var paramString = this.createParamString();\r\n        return paramString.join(\"&\");\r\n    };\r\n    /**\r\n     * Helper creates an array of key value string pairs.\r\n     */\r\n    ServerTokenRequestParameters.prototype.createParamString = function () {\r\n        var str = [];\r\n        str.push(AADServerParamKeys.CLIENT_ID + \"=\" + encodeURIComponent(this.clientId));\r\n        str.push(AADServerParamKeys.SCOPE + \"=\" + encodeURIComponent(this.scopes.printScopes()));\r\n        str.push(AADServerParamKeys.REDIRECT_URI + \"=\" + encodeURIComponent(this.redirectUri));\r\n        // If there is a code response or refresh token, push relevant variables. Throw error otherwise.\r\n        if (this.codeResponse) {\r\n            str.push(AADServerParamKeys.CODE + \"=\" + encodeURIComponent(this.codeResponse.code));\r\n            str.push(AADServerParamKeys.CODE_VERIFIER + \"=\" + encodeURIComponent(this.tokenRequest.codeVerifier));\r\n            str.push(AADServerParamKeys.GRANT_TYPE + \"=\" + Constants.CODE_GRANT_TYPE);\r\n        }\r\n        else if (!StringUtils.isEmpty(this.refreshToken)) {\r\n            str.push(AADServerParamKeys.REFRESH_TOKEN + \"=\" + this.refreshToken);\r\n            str.push(AADServerParamKeys.GRANT_TYPE + \"=\" + Constants.RT_GRANT_TYPE);\r\n        }\r\n        else {\r\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n        }\r\n        // Temporary until server allows CORS requests from browser without client secret\r\n        str.push(\"client_secret=\" + this.clientSecret);\r\n        return str;\r\n    };\r\n    return ServerTokenRequestParameters;\r\n}(ServerRequestParameters));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * Returns time in seconds for expiration based on string value passed in.\r\n     *\r\n     * @param expiresIn\r\n     */\r\n    TimeUtils.parseExpiresInSeconds = function (expiresIn) {\r\n        // if AAD did not send \"expires_in\" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as \"expires_in\" value instead of 3600\r\n        return expiresIn || 3599;\r\n    };\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    TimeUtils.nowSeconds = function () {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    return TimeUtils;\r\n}());\n\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (this._urlString && StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = this.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.prototype.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            url = url.toLowerCase();\r\n        }\r\n        if (url && !url.endsWith(\"/\")) {\r\n            url += \"/\";\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n        // Throw error if path segments are not parseable.\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Function to remove query string params from url. Returns the new url.\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlString.prototype.urlRemoveQueryStringParameter = function (name) {\r\n        if (StringUtils.isEmpty(this.urlString)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        return this.urlString;\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        var hashIndex1 = this.urlString.indexOf(\"#\");\r\n        var hashIndex2 = this.urlString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return this.urlString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return this.urlString.substring(hashIndex1 + 1);\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Returns deserialized portion of URL hash\r\n     */\r\n    UrlString.prototype.getDeserializedHash = function () {\r\n        var hash = this.getHash();\r\n        var deserializedHash = StringUtils.queryStringToObject(hash);\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // Throws error if url is empty\r\n        if (!this.urlString) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        return urlComponents;\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (url) {\r\n        if (StringUtils.isEmpty(url)) {\r\n            return false;\r\n        }\r\n        var urlString = new UrlString(url);\r\n        var parameters = urlString.getDeserializedHash();\r\n        return !!(parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\n/**\r\n * Key to cache access tokens, id tokens, and refresh tokens. Helps manage token renewal.\r\n */\r\nvar AccessTokenKey = /** @class */ (function () {\r\n    function AccessTokenKey(authority, clientId, scopes, resource, uid, utid, cryptoObj) {\r\n        var authorityUri = new UrlString(authority);\r\n        this.authority = authorityUri.urlString;\r\n        this.clientId = clientId;\r\n        this.scopes = scopes;\r\n        this.resource = resource;\r\n        if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\r\n            this.homeAccountIdentifier = cryptoObj.base64Encode(uid) + \".\" + cryptoObj.base64Encode(utid);\r\n        }\r\n    }\r\n    return AccessTokenKey;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Value of access token cache item which is stored in cache. Helps manage token renewal.\r\n */\r\nvar AccessTokenValue = /** @class */ (function () {\r\n    function AccessTokenValue(tokenType, accessToken, idToken, refreshToken, expiresOn, extExpiresOn) {\r\n        this.tokenType = tokenType;\r\n        this.accessToken = accessToken;\r\n        this.idToken = idToken;\r\n        this.refreshToken = refreshToken;\r\n        this.expiresOnSec = expiresOn;\r\n        this.extExpiresOnSec = extExpiresOn;\r\n    }\r\n    return AccessTokenValue;\r\n}());\n\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nvar ServerError = /** @class */ (function (_super) {\r\n    __extends(ServerError, _super);\r\n    function ServerError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ServerError\";\r\n        Object.setPrototypeOf(_this, ServerError.prototype);\r\n        return _this;\r\n    }\r\n    return ServerError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function which validates server authorization code response.\r\n * @param serverResponseHash\r\n * @param cachedState\r\n * @param cryptoObj\r\n */\r\nfunction validateServerAuthorizationCodeResponse(serverResponseHash, cachedState, cryptoObj) {\r\n    if (serverResponseHash.state !== cachedState) {\r\n        throw ClientAuthError.createStateMismatchError();\r\n    }\r\n    // Check for error\r\n    if (serverResponseHash.error || serverResponseHash.error_description) {\r\n        throw new ServerError(serverResponseHash.error, serverResponseHash.error_description);\r\n    }\r\n    if (serverResponseHash.client_info) {\r\n        buildClientInfo(serverResponseHash.client_info, cryptoObj);\r\n    }\r\n}\n\n/**\r\n * Class that handles response parsing.\r\n */\r\nvar ResponseHandler = /** @class */ (function () {\r\n    function ResponseHandler(clientId, cacheStorage, cacheManager, cryptoObj, logger) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cacheManager = cacheManager;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Returns a new response with the data from original response filled with the relevant IdToken data.\r\n     * - raw id token\r\n     * - id token claims\r\n     * - unique id (oid or sub claim of token)\r\n     * - tenant id (tid claim of token)\r\n     * @param originalResponse\r\n     * @param idTokenObj\r\n     */\r\n    ResponseHandler.setResponseIdToken = function (originalResponse, idTokenObj) {\r\n        if (!originalResponse) {\r\n            return null;\r\n        }\r\n        else if (!idTokenObj) {\r\n            return originalResponse;\r\n        }\r\n        var expiresSeconds = Number(idTokenObj.claims.exp);\r\n        if (expiresSeconds && !originalResponse.expiresOn) {\r\n            originalResponse.expiresOn = new Date(expiresSeconds * 1000);\r\n        }\r\n        return __assign(__assign({}, originalResponse), { idToken: idTokenObj.rawIdToken, idTokenClaims: idTokenObj.claims, uniqueId: idTokenObj.claims.oid || idTokenObj.claims.sub, tenantId: idTokenObj.claims.tid });\r\n    };\r\n    /**\r\n     * Validates and handles a response from the server, and returns a constructed object with the authorization code and state.\r\n     * @param serverParams\r\n     */\r\n    ResponseHandler.prototype.handleServerCodeResponse = function (serverParams) {\r\n        try {\r\n            // Validate hash fragment response parameters\r\n            validateServerAuthorizationCodeResponse(serverParams, this.cacheStorage.getItem(TemporaryCacheKeys.REQUEST_STATE), this.cryptoObj);\r\n            // Cache client info\r\n            if (serverParams.client_info) {\r\n                this.cacheStorage.setItem(PersistentCacheKeys.CLIENT_INFO, serverParams.client_info);\r\n            }\r\n            // Create response object\r\n            var response = {\r\n                code: serverParams.code,\r\n                userRequestState: serverParams.state\r\n            };\r\n            return response;\r\n        }\r\n        catch (e) {\r\n            this.cacheManager.resetTempCacheItems(serverParams && serverParams.state);\r\n            throw e;\r\n        }\r\n    };\r\n    /**\r\n     * Helper function which saves or updates the token in the cache and constructs the final token response to send back to the user.\r\n     * @param originalTokenResponse\r\n     * @param authority\r\n     * @param resource\r\n     * @param serverTokenResponse\r\n     * @param clientInfo\r\n     */\r\n    ResponseHandler.prototype.saveToken = function (originalTokenResponse, authority, resource, serverTokenResponse, clientInfo) {\r\n        var _this = this;\r\n        // Set consented scopes in response\r\n        var responseScopes = ScopeSet.fromString(serverTokenResponse.scope, this.clientId, true);\r\n        var responseScopeArray = responseScopes.asArray();\r\n        // Expiration calculation\r\n        var expiresIn = TimeUtils.parseExpiresInSeconds(serverTokenResponse.expires_in);\r\n        var expirationSec = TimeUtils.nowSeconds() + expiresIn;\r\n        var extendedExpirationSec = expirationSec + TimeUtils.parseExpiresInSeconds(serverTokenResponse.ext_expires_in);\r\n        // Get id token\r\n        if (!StringUtils.isEmpty(originalTokenResponse.idToken)) {\r\n            this.cacheStorage.setItem(PersistentCacheKeys.ID_TOKEN, originalTokenResponse.idToken);\r\n        }\r\n        // Save access token in cache\r\n        var newAccessTokenValue = new AccessTokenValue(serverTokenResponse.token_type, serverTokenResponse.access_token, originalTokenResponse.idToken, serverTokenResponse.refresh_token, expirationSec.toString(), extendedExpirationSec.toString());\r\n        var homeAccountIdentifier = originalTokenResponse.account && originalTokenResponse.account.homeAccountIdentifier;\r\n        var accessTokenCacheItems = this.cacheManager.getAllAccessTokens(this.clientId, authority || \"\", resource || \"\", homeAccountIdentifier || \"\");\r\n        // If no items in cache with these parameters, set new item.\r\n        if (accessTokenCacheItems.length < 1) {\r\n            this.logger.info(\"No tokens found, creating new item.\");\r\n            var newTokenKey = new AccessTokenKey(authority, this.clientId, serverTokenResponse.scope, resource, clientInfo && clientInfo.uid, clientInfo && clientInfo.utid, this.cryptoObj);\r\n            this.cacheStorage.setItem(JSON.stringify(newTokenKey), JSON.stringify(newAccessTokenValue));\r\n        }\r\n        else {\r\n            // Check if scopes are intersecting. If they are, combine scopes and replace cache item.\r\n            accessTokenCacheItems.forEach(function (accessTokenCacheItem) {\r\n                var cachedScopes = ScopeSet.fromString(accessTokenCacheItem.key.scopes, _this.clientId, true);\r\n                if (cachedScopes.intersectingScopeSets(responseScopes)) {\r\n                    _this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));\r\n                    cachedScopes.appendScopes(responseScopeArray);\r\n                    accessTokenCacheItem.key.scopes = cachedScopes.printScopes();\r\n                    if (StringUtils.isEmpty(newAccessTokenValue.idToken)) {\r\n                        newAccessTokenValue.idToken = accessTokenCacheItem.value.idToken;\r\n                    }\r\n                    _this.cacheStorage.setItem(JSON.stringify(accessTokenCacheItem.key), JSON.stringify(newAccessTokenValue));\r\n                }\r\n            });\r\n        }\r\n        // Save tokens in response and return\r\n        return __assign(__assign({}, originalTokenResponse), { scopes: responseScopeArray, accessToken: serverTokenResponse.access_token, refreshToken: serverTokenResponse.refresh_token, expiresOn: new Date(expirationSec * 1000) });\r\n    };\r\n    /**\r\n     * Gets account cached with given key. Returns null if parsing could not be completed.\r\n     * @param accountKey\r\n     */\r\n    ResponseHandler.prototype.getCachedAccount = function (accountKey) {\r\n        try {\r\n            return JSON.parse(this.cacheStorage.getItem(accountKey));\r\n        }\r\n        catch (e) {\r\n            this.logger.warning(\"Account could not be parsed: \" + JSON.stringify(e));\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authorityString\r\n     * @param resource\r\n     * @param state\r\n     */\r\n    ResponseHandler.prototype.createTokenResponse = function (serverTokenResponse, authorityString, resource, state) {\r\n        var tokenResponse = {\r\n            uniqueId: \"\",\r\n            tenantId: \"\",\r\n            tokenType: \"\",\r\n            idToken: null,\r\n            idTokenClaims: null,\r\n            accessToken: \"\",\r\n            refreshToken: \"\",\r\n            scopes: [],\r\n            expiresOn: null,\r\n            account: null,\r\n            userRequestState: \"\"\r\n        };\r\n        // Retrieve current id token object\r\n        var idTokenObj;\r\n        var cachedIdToken = this.cacheStorage.getItem(PersistentCacheKeys.ID_TOKEN);\r\n        if (serverTokenResponse.id_token) {\r\n            idTokenObj = new IdToken(serverTokenResponse.id_token, this.cryptoObj);\r\n            tokenResponse = ResponseHandler.setResponseIdToken(tokenResponse, idTokenObj);\r\n        }\r\n        else if (cachedIdToken) {\r\n            idTokenObj = new IdToken(cachedIdToken, this.cryptoObj);\r\n            tokenResponse = ResponseHandler.setResponseIdToken(tokenResponse, idTokenObj);\r\n        }\r\n        else {\r\n            idTokenObj = null;\r\n        }\r\n        var clientInfo = null;\r\n        var cachedAccount = null;\r\n        if (idTokenObj) {\r\n            // If state is empty, refresh token is being used\r\n            if (!StringUtils.isEmpty(state)) {\r\n                this.logger.info(\"State was detected - nonce should be available.\");\r\n                // check nonce integrity if refresh token is not used - throw an error if not matched        \r\n                if (!idTokenObj.claims.nonce) {\r\n                    throw ClientAuthError.createInvalidIdTokenError(idTokenObj);\r\n                }\r\n                var nonce = this.cacheStorage.getItem(this.cacheManager.generateNonceKey(state));\r\n                if (idTokenObj.claims.nonce !== nonce) {\r\n                    throw ClientAuthError.createNonceMismatchError();\r\n                }\r\n            }\r\n            // Retrieve client info\r\n            clientInfo = buildClientInfo(this.cacheStorage.getItem(PersistentCacheKeys.CLIENT_INFO), this.cryptoObj);\r\n            // Create account object for request\r\n            tokenResponse.account = Account.createAccount(idTokenObj, clientInfo, this.cryptoObj);\r\n            // Save the access token if it exists\r\n            var accountKey = this.cacheManager.generateAcquireTokenAccountKey(tokenResponse.account.homeAccountIdentifier);\r\n            // Get cached account\r\n            cachedAccount = this.getCachedAccount(accountKey);\r\n        }\r\n        // Return user set state in the response\r\n        tokenResponse.userRequestState = ProtocolUtils.getUserRequestState(state);\r\n        this.cacheManager.resetTempCacheItems(state);\r\n        if (!cachedAccount || !tokenResponse.account || Account.compareAccounts(cachedAccount, tokenResponse.account)) {\r\n            return this.saveToken(tokenResponse, authorityString, resource, serverTokenResponse, clientInfo);\r\n        }\r\n        else {\r\n            this.logger.error(\"Accounts do not match.\");\r\n            this.logger.errorPii(\"Cached Account: \" + JSON.stringify(cachedAccount) + \", New Account: \" + JSON.stringify(tokenResponse.account));\r\n            throw ClientAuthError.createAccountMismatchError();\r\n        }\r\n    };\r\n    return ResponseHandler;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function which validates server authorization token response.\r\n * @param serverResponse\r\n */\r\nfunction validateServerAuthorizationTokenResponse(serverResponse) {\r\n    // Check for error\r\n    if (serverResponse.error || serverResponse.error_description) {\r\n        var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\r\n        throw new ServerError(serverResponse.error, errString);\r\n    }\r\n}\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replaceTenant(this.tenantDiscoveryResponse.authorization_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replaceTenant(this.tenantDiscoveryResponse.token_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replaceTenant(this.tenantDiscoveryResponse.end_session_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replaceTenant(this.tenantDiscoveryResponse.issuer);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(\"{tenant}\", this.tenant);\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.tenantDiscoveryResponse;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     * @param openIdConfigurationEndpoint\r\n     */\r\n    Authority.prototype.discoverEndpoints = function (openIdConfigurationEndpoint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var openIdConfigEndpoint, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.getOpenIdConfigurationAsync()];\r\n                    case 1:\r\n                        openIdConfigEndpoint = _b.sent();\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.discoverEndpoints(openIdConfigEndpoint)];\r\n                    case 2:\r\n                        _a.tenantDiscoveryResponse = _b.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Authority;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nvar AuthorityType;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n    AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\r\n})(AuthorityType || (AuthorityType = {}));\n\n/**\r\n * The AadAuthority class extends the Authority class and adds functionality specific to the Azure AD OAuth Authority.\r\n */\r\nvar AadAuthority = /** @class */ (function (_super) {\r\n    __extends(AadAuthority, _super);\r\n    function AadAuthority(authority, networkInterface) {\r\n        return _super.call(this, authority, networkInterface) || this;\r\n    }\r\n    Object.defineProperty(AadAuthority.prototype, \"authorityType\", {\r\n        // Set authority type to AAD\r\n        get: function () {\r\n            return AuthorityType.Aad;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AadAuthority.prototype, \"isValidationEnabled\", {\r\n        get: function () {\r\n            // Hardcoded to true for now - may change depending on requirements\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AadAuthority.prototype, \"aadInstanceDiscoveryEndpointUrl\", {\r\n        get: function () {\r\n            return AadAuthority.aadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    AadAuthority.prototype.getOpenIdConfigurationAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.isValidationEnabled || this.isInTrustedHostList(this.canonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n                            return [2 /*return*/, this.defaultOpenIdConfigurationEndpoint];\r\n                        }\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.aadInstanceDiscoveryEndpointUrl)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, response.tenant_discovery_endpoint];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    AadAuthority.prototype.isInTrustedHostList = function (host) {\r\n        return AADTrustedHostList.includes(host);\r\n    };\r\n    // Default AAD Instance Discovery Endpoint\r\n    AadAuthority.aadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\r\n    return AadAuthority;\r\n}(Authority));\n\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n     * Parse the url and determine the type of authority\r\n     */\r\n    AuthorityFactory.detectAuthorityFromUrl = function (authorityString) {\r\n        var authorityUrl = new UrlString(authorityString);\r\n        var components = authorityUrl.getUrlComponents();\r\n        var pathSegments = components.PathSegments;\r\n        switch (pathSegments[0]) {\r\n            case \"tfp\":\r\n                // tfp denotes a b2c url\r\n                return AuthorityType.B2C;\r\n            default:\r\n                // default authority is always AAD\r\n                return AuthorityType.Aad;\r\n        }\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n     */\r\n    AuthorityFactory.createInstance = function (authorityUrl, networkInterface) {\r\n        // Return null if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            return null;\r\n        }\r\n        var type = AuthorityFactory.detectAuthorityFromUrl(authorityUrl);\r\n        // Depending on above detection, create the right type.\r\n        switch (type) {\r\n            case AuthorityType.Aad:\r\n                return new AadAuthority(authorityUrl, networkInterface);\r\n            default:\r\n                throw ClientConfigurationError.createInvalidAuthorityTypeError(\"Given Url: \" + authorityUrl);\r\n        }\r\n    };\r\n    // default authority\r\n    AuthorityFactory.DEFAULT_AUTHORITY = \"https://login.microsoftonline.com/common\";\r\n    return AuthorityFactory;\r\n}());\n\n/**\r\n * AuthorizationCodeModule class\r\n *\r\n * Object instance which will construct requests to send to and handle responses\r\n * from the Microsoft STS using the authorization code flow.\r\n */\r\nvar AuthorizationCodeModule = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeModule, _super);\r\n    function AuthorizationCodeModule(configuration) {\r\n        var _this = \r\n        // Implement base module\r\n        _super.call(this, {\r\n            systemOptions: configuration.systemOptions,\r\n            loggerOptions: configuration.loggerOptions,\r\n            storageInterface: configuration.storageInterface,\r\n            networkInterface: configuration.networkInterface,\r\n            cryptoInterface: configuration.cryptoInterface\r\n        }) || this;\r\n        // Implement defaults in config\r\n        _this.clientConfig = buildPublicClientSPAConfiguration(configuration);\r\n        if (_this.clientConfig.auth.tmp_clientSecret) {\r\n            _this.logger.warning(\"Client secret is a temporary parameter that will not be carried forward in production versions of this library.\");\r\n        }\r\n        // Initialize default authority instance\r\n        _this.defaultAuthorityInstance = AuthorityFactory.createInstance(_this.clientConfig.auth.authority || AuthorityFactory.DEFAULT_AUTHORITY, _this.networkClient);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a url for logging in a user. This will by default append the client id to the list of scopes,\r\n     * allowing you to retrieve an id token in the subsequent code exchange. Also performs validation of the request parameters.\r\n     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.\r\n     * @param request\r\n     */\r\n    AuthorizationCodeModule.prototype.createLoginUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.createUrl(request, true)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates a url for logging in a user. Also performs validation of the request parameters.\r\n     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.\r\n     * @param request\r\n     */\r\n    AuthorizationCodeModule.prototype.createAcquireTokenUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.createUrl(request, false)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function which creates URL. If isLoginCall is true, MSAL appends client id scope to retrieve id token from the service.\r\n     * @param request\r\n     * @param isLoginCall\r\n     */\r\n    AuthorizationCodeModule.prototype.createUrl = function (request, isLoginCall) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var acquireTokenAuthority, e_1, requestParameters, adalIdToken, adalIdTokenString, urlNavigate, tokenRequest, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        acquireTokenAuthority = (request && request.authority) ? AuthorityFactory.createInstance(request.authority, this.networkClient) : this.defaultAuthorityInstance;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\r\n                    case 4:\r\n                        _a.trys.push([4, 6, , 7]);\r\n                        requestParameters = new ServerCodeRequestParameters(acquireTokenAuthority, this.clientConfig.auth.clientId, request, this.getAccount(), this.getRedirectUri(), this.cryptoObj, isLoginCall);\r\n                        adalIdToken = null;\r\n                        if (!requestParameters.hasSSOParam()) {\r\n                            adalIdTokenString = this.cacheStorage.getItem(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n                            if (!StringUtils.isEmpty(adalIdTokenString)) {\r\n                                adalIdToken = new IdToken(adalIdTokenString, this.cryptoObj);\r\n                                this.cacheStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n                            }\r\n                        }\r\n                        // Update required cache entries for request.\r\n                        this.cacheManager.updateCacheEntries(requestParameters, request.account);\r\n                        // Populate query parameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer.\r\n                        requestParameters.populateQueryParams(adalIdToken);\r\n                        return [4 /*yield*/, requestParameters.createNavigateUrl()];\r\n                    case 5:\r\n                        urlNavigate = _a.sent();\r\n                        tokenRequest = {\r\n                            scopes: requestParameters.scopes.getOriginalScopesAsArray(),\r\n                            resource: request.resource,\r\n                            codeVerifier: requestParameters.generatedPkce.verifier,\r\n                            extraQueryParameters: request.extraQueryParameters,\r\n                            authority: requestParameters.authorityInstance.canonicalAuthority,\r\n                            correlationId: requestParameters.correlationId\r\n                        };\r\n                        this.cacheStorage.setItem(TemporaryCacheKeys.REQUEST_PARAMS, this.cryptoObj.base64Encode(JSON.stringify(tokenRequest)));\r\n                        return [2 /*return*/, urlNavigate];\r\n                    case 6:\r\n                        e_2 = _a.sent();\r\n                        // Reset cache items before re-throwing.\r\n                        this.cacheManager.resetTempCacheItems(requestParameters && requestParameters.state);\r\n                        throw e_2;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given an authorization code, it will perform a token exchange using cached values from a previous call to\r\n     * createLoginUrl() or createAcquireTokenUrl(). You must call this AFTER using one of those APIs first. You should\r\n     * also use the handleFragmentResponse() API to pass the codeResponse to this function afterwards.\r\n     * @param codeResponse\r\n     */\r\n    AuthorizationCodeModule.prototype.acquireToken = function (codeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenRequest, acquireTokenAuthority, e_3, tokenEndpoint, tokenReqParams, e_4;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 5, , 6]);\r\n                        tokenRequest = this.getCachedRequest(codeResponse.userRequestState);\r\n                        // If no code response is given, we cannot acquire a token.\r\n                        if (!codeResponse || !codeResponse.code) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        acquireTokenAuthority = (tokenRequest && tokenRequest.authority) ? AuthorityFactory.createInstance(tokenRequest.authority, this.networkClient) : this.defaultAuthorityInstance;\r\n                        if (!!acquireTokenAuthority.discoveryComplete()) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_3 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_3);\r\n                    case 4:\r\n                        tokenEndpoint = acquireTokenAuthority.tokenEndpoint;\r\n                        tokenReqParams = new ServerTokenRequestParameters(this.clientConfig.auth.clientId, this.clientConfig.auth.tmp_clientSecret, tokenRequest, codeResponse, this.getRedirectUri(), this.cryptoObj);\r\n                        // User helper to retrieve token response.\r\n                        return [2 /*return*/, this.getTokenResponse(tokenEndpoint, tokenReqParams, tokenRequest, codeResponse)];\r\n                    case 5:\r\n                        e_4 = _a.sent();\r\n                        // Reset cache items and set account to null before re-throwing.\r\n                        this.cacheManager.resetTempCacheItems(codeResponse && codeResponse.userRequestState);\r\n                        this.account = null;\r\n                        throw e_4;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token. Will throw an error if login is not completed (unless\r\n     * id tokens are not being renewed).\r\n     * @param request\r\n     */\r\n    AuthorizationCodeModule.prototype.renewToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var account, requestScopes, acquireTokenAuthority, e_5, cachedTokenItem, expirationSec, offsetCurrentTimeSec, cachedScopes, defaultTokenResponse, tokenEndpoint, tokenReqParams, e_6;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 5, , 6]);\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        account = request.account || this.getAccount();\r\n                        requestScopes = new ScopeSet(request.scopes, this.clientConfig.auth.clientId, true);\r\n                        // If this is an id token renewal, and no account is present, throw an error.\r\n                        if (requestScopes.isLoginScopeSet()) {\r\n                            if (!account) {\r\n                                throw ClientAuthError.createUserLoginRequiredError();\r\n                            }\r\n                        }\r\n                        acquireTokenAuthority = request.authority ? AuthorityFactory.createInstance(request.authority, this.networkClient) : this.defaultAuthorityInstance;\r\n                        if (!!acquireTokenAuthority.discoveryComplete()) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_5 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_5);\r\n                    case 4:\r\n                        cachedTokenItem = this.getCachedTokens(requestScopes, acquireTokenAuthority.canonicalAuthority, request.resource, account && account.homeAccountIdentifier);\r\n                        expirationSec = Number(cachedTokenItem.value.expiresOnSec);\r\n                        offsetCurrentTimeSec = TimeUtils.nowSeconds() + this.clientConfig.systemOptions.tokenRenewalOffsetSeconds;\r\n                        // Check if refresh is forced, or if tokens are expired. If neither are true, return a token response with the found token entry.\r\n                        if (!request.forceRefresh && expirationSec && expirationSec > offsetCurrentTimeSec) {\r\n                            cachedScopes = ScopeSet.fromString(cachedTokenItem.key.scopes, this.clientConfig.auth.clientId, true);\r\n                            defaultTokenResponse = {\r\n                                uniqueId: \"\",\r\n                                tenantId: \"\",\r\n                                scopes: cachedScopes.asArray(),\r\n                                tokenType: cachedTokenItem.value.tokenType,\r\n                                idToken: \"\",\r\n                                idTokenClaims: null,\r\n                                accessToken: cachedTokenItem.value.accessToken,\r\n                                refreshToken: cachedTokenItem.value.refreshToken,\r\n                                expiresOn: new Date(expirationSec * 1000),\r\n                                account: account,\r\n                                userRequestState: \"\"\r\n                            };\r\n                            // Only populate id token if it exists in cache item.\r\n                            return [2 /*return*/, StringUtils.isEmpty(cachedTokenItem.value.idToken) ? defaultTokenResponse :\r\n                                    ResponseHandler.setResponseIdToken(defaultTokenResponse, new IdToken(cachedTokenItem.value.idToken, this.cryptoObj))];\r\n                        }\r\n                        else {\r\n                            // Renew the tokens.\r\n                            request.authority = cachedTokenItem.key.authority;\r\n                            tokenEndpoint = acquireTokenAuthority.tokenEndpoint;\r\n                            tokenReqParams = new ServerTokenRequestParameters(this.clientConfig.auth.clientId, this.clientConfig.auth.tmp_clientSecret, request, null, this.getRedirectUri(), this.cryptoObj, cachedTokenItem.value.refreshToken);\r\n                            // User helper to retrieve token response.\r\n                            return [2 /*return*/, this.getTokenResponse(tokenEndpoint, tokenReqParams, request)];\r\n                        }\r\n                    case 5:\r\n                        e_6 = _a.sent();\r\n                        // Reset cache items and set account to null before re-throwing.\r\n                        this.cacheManager.resetTempCacheItems();\r\n                        this.account = null;\r\n                        throw e_6;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // #region Logout\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeModule.prototype.logout = function (authorityUri) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentAccount, homeAccountIdentifier, postLogoutRedirectUri, acquireTokenAuthority, e_7, logoutUri;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        currentAccount = this.getAccount();\r\n                        homeAccountIdentifier = currentAccount ? currentAccount.homeAccountIdentifier : \"\";\r\n                        // Remove all pertinent access tokens.\r\n                        this.cacheManager.removeAllAccessTokens(this.clientConfig.auth.clientId, authorityUri, \"\", homeAccountIdentifier);\r\n                        // Clear remaining cache items.\r\n                        this.cacheStorage.clear();\r\n                        // Clear current account.\r\n                        this.account = null;\r\n                        postLogoutRedirectUri = \"\";\r\n                        try {\r\n                            postLogoutRedirectUri = \"?\" + AADServerParamKeys.POST_LOGOUT_URI + \"=\" + encodeURIComponent(this.getPostLogoutRedirectUri());\r\n                        }\r\n                        catch (e) { }\r\n                        acquireTokenAuthority = (authorityUri) ? AuthorityFactory.createInstance(authorityUri, this.networkClient) : this.defaultAuthorityInstance;\r\n                        if (!!acquireTokenAuthority.discoveryComplete()) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_7 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_7);\r\n                    case 4:\r\n                        logoutUri = \"\" + acquireTokenAuthority.endSessionEndpoint + postLogoutRedirectUri;\r\n                        return [2 /*return*/, logoutUri];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // #endregion\r\n    // #region Response Handling\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeModule.prototype.handleFragmentResponse = function (hashFragment) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.clientConfig.auth.clientId, this.cacheStorage, this.cacheManager, this.cryptoObj, this.logger);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        var serverParams = hashUrlString.getDeserializedHash();\r\n        // Get code response\r\n        return responseHandler.handleServerCodeResponse(serverParams);\r\n    };\r\n    // #endregion\r\n    // #region Helpers\r\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */\r\n    AuthorizationCodeModule.prototype.getCachedRequest = function (state) {\r\n        try {\r\n            // Get token request from cache and parse as TokenExchangeParameters.\r\n            var encodedTokenRequest = this.cacheStorage.getItem(TemporaryCacheKeys.REQUEST_PARAMS);\r\n            var parsedRequest = JSON.parse(this.cryptoObj.base64Decode(encodedTokenRequest));\r\n            this.cacheStorage.removeItem(TemporaryCacheKeys.REQUEST_PARAMS);\r\n            // Get cached authority and use if no authority is given.\r\n            if (!parsedRequest.authority) {\r\n                var authorityKey = this.cacheManager.generateAuthorityKey(state);\r\n                var cachedAuthority = this.cacheStorage.getItem(authorityKey);\r\n                parsedRequest.authority = cachedAuthority;\r\n            }\r\n            return parsedRequest;\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenRequestCacheError(err);\r\n        }\r\n    };\r\n    /**\r\n     * Gets all cached tokens based on the given criteria.\r\n     * @param requestScopes\r\n     * @param authorityUri\r\n     * @param resourceId\r\n     * @param homeAccountIdentifier\r\n     */\r\n    AuthorizationCodeModule.prototype.getCachedTokens = function (requestScopes, authorityUri, resourceId, homeAccountIdentifier) {\r\n        var _this = this;\r\n        // Get all access tokens with matching authority, resource id and home account ID\r\n        var tokenCacheItems = this.cacheManager.getAllAccessTokens(this.clientConfig.auth.clientId, authorityUri || \"\", resourceId || \"\", homeAccountIdentifier || \"\");\r\n        if (tokenCacheItems.length === 0) {\r\n            throw ClientAuthError.createNoTokensFoundError(requestScopes.printScopes());\r\n        }\r\n        // Filter cache items based on available scopes.\r\n        var filteredCacheItems = tokenCacheItems.filter(function (cacheItem) {\r\n            var cachedScopes = ScopeSet.fromString(cacheItem.key.scopes, _this.clientConfig.auth.clientId, true);\r\n            return cachedScopes.containsScopeSet(requestScopes);\r\n        });\r\n        // If cache items contains too many matching tokens, throw error.\r\n        if (filteredCacheItems.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError(requestScopes.printScopes());\r\n        }\r\n        else if (filteredCacheItems.length === 1) {\r\n            // Return single cache item.\r\n            return filteredCacheItems[0];\r\n        }\r\n        // If cache items are empty, throw error.\r\n        throw ClientAuthError.createNoTokensFoundError(requestScopes.printScopes());\r\n    };\r\n    /**\r\n     * Makes a request to the token endpoint with the given parameters and parses the response.\r\n     * @param tokenEndpoint\r\n     * @param tokenReqParams\r\n     * @param tokenRequest\r\n     * @param codeResponse\r\n     */\r\n    AuthorizationCodeModule.prototype.getTokenResponse = function (tokenEndpoint, tokenReqParams, tokenRequest, codeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var acquiredTokenResponse, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, {\r\n                            body: tokenReqParams.createRequestBody(),\r\n                            headers: tokenReqParams.createRequestHeaders()\r\n                        })];\r\n                    case 1:\r\n                        acquiredTokenResponse = _a.sent();\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        validateServerAuthorizationTokenResponse(acquiredTokenResponse);\r\n                        responseHandler = new ResponseHandler(this.clientConfig.auth.clientId, this.cacheStorage, this.cacheManager, this.cryptoObj, this.logger);\r\n                        tokenResponse = responseHandler.createTokenResponse(acquiredTokenResponse, tokenRequest.authority, tokenRequest.resource, codeResponse && codeResponse.userRequestState);\r\n                        // Set current account to received response account, if any.\r\n                        this.account = tokenResponse.account;\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // #endregion\r\n    // #region Getters and setters\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n     * @returns {string} redirect URL\r\n     *\r\n     */\r\n    AuthorizationCodeModule.prototype.getRedirectUri = function () {\r\n        if (this.clientConfig.auth.redirectUri) {\r\n            if (typeof this.clientConfig.auth.redirectUri === \"function\") {\r\n                return this.clientConfig.auth.redirectUri();\r\n            }\r\n            else if (!StringUtils.isEmpty(this.clientConfig.auth.redirectUri)) {\r\n                return this.clientConfig.auth.redirectUri;\r\n            }\r\n        }\r\n        // This should never throw unless window.location.href is returning empty.\r\n        throw ClientConfigurationError.createRedirectUriEmptyError();\r\n    };\r\n    /**\r\n     * Use to get the post logout redirect uri configured in MSAL or null.\r\n     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} post logout redirect URL\r\n     */\r\n    AuthorizationCodeModule.prototype.getPostLogoutRedirectUri = function () {\r\n        if (this.clientConfig.auth.postLogoutRedirectUri) {\r\n            if (typeof this.clientConfig.auth.postLogoutRedirectUri === \"function\") {\r\n                return this.clientConfig.auth.postLogoutRedirectUri();\r\n            }\r\n            else if (!StringUtils.isEmpty(this.clientConfig.auth.postLogoutRedirectUri)) {\r\n                return this.clientConfig.auth.postLogoutRedirectUri;\r\n            }\r\n        }\r\n        // This should never throw unless window.location.href is returning empty.\r\n        throw ClientConfigurationError.createPostLogoutRedirectUriEmptyError();\r\n    };\r\n    return AuthorizationCodeModule;\r\n}(AuthModule));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Builds a response that only sets state\r\n * @param responseState\r\n */\r\nfunction buildResponseStateOnly(responseState) {\r\n    return {\r\n        userRequestState: responseState\r\n    };\r\n}\n\nexport { Account, AuthError, AuthErrorMessage, Authority, AuthorityFactory, AuthorizationCodeModule, ClientAuthError, ClientAuthErrorMessage, ClientConfigurationError, ClientConfigurationErrorMessage, Constants, LogLevel, PersistentCacheKeys, StringUtils, TemporaryCacheKeys, UrlString, buildResponseStateOnly };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const BrowserConstants = {\r\n    // Local storage constant string\r\n    CACHE_LOCATION_LOCAL: \"localStorage\",\r\n    // Session storage constant string\r\n    CACHE_LOCATION_SESSION: \"sessionStorage\",\r\n    // Interaction status key (only used for browsers)\r\n    INTERACTION_STATUS_KEY: \"interaction.status\",\r\n    // Interaction in progress cache value\r\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\r\n    // Default popup window width\r\n    POPUP_WIDTH: 483,\r\n    // Default popup window height\r\n    POPUP_HEIGHT: 600,\r\n    // Default popup monitor poll interval in milliseconds\r\n    POPUP_POLL_INTERVAL_MS: 50\r\n};\r\n\r\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\r\nexport enum HTTP_REQUEST_TYPE {\r\n    GET = \"GET\",\r\n    POST = \"POST\"\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { INetworkModule, NetworkRequestOptions } from \"@azure/msal-common\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\r\nexport class FetchClient implements INetworkModule {\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<T> {\r\n        const response = await fetch(url, {\r\n            method: HTTP_REQUEST_TYPE.GET,\r\n            headers: this.getFetchHeaders(options)\r\n        });\r\n        return await response.json() as T;\r\n    }\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<T> {\r\n        const reqBody = (options && options.body) || \"\";\r\n        const response = await fetch(url, {\r\n            method: HTTP_REQUEST_TYPE.POST,\r\n            headers: this.getFetchHeaders(options),\r\n            credentials: \"include\",\r\n            body: reqBody\r\n        });\r\n        return await response.json() as T;\r\n    }\r\n\r\n    /**\r\n     * Get Fetch API Headers object from string map\r\n     * @param inputHeaders \r\n     */\r\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\r\n        const headers = new Headers();\r\n        if (!(options && options.headers)) {\r\n            return headers;\r\n        }\r\n        options.headers.forEach((value, key) => {\r\n            headers.append(key, value);\r\n        });\r\n        return headers;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { AuthError, StringUtils } from \"@azure/msal-common\";\r\n\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const BrowserAuthErrorMessage = {\r\n    noWindowObjectError: {\r\n        code: \"no_window_object\",\r\n        desc: \"No window object detected.\"\r\n    },\r\n    pkceNotGenerated: {\r\n        code: \"pkce_not_created\",\r\n        desc: \"The PKCE code challenge and verifier could not be generated.\"\r\n    },\r\n    cryptoDoesNotExist: {\r\n        code: \"crypto_nonexistent\",\r\n        desc: \"The crypto object or function is not available.\"\r\n    },\r\n    httpMethodNotImplementedError: {\r\n        code: \"http_method_not_implemented\",\r\n        desc: \"The HTTP method given has not been implemented in this library.\"\r\n    },\r\n    emptyNavigateUriError: {\r\n        code: \"empty_navigate_uri\",\r\n        desc: \"Navigation URI is empty. Please check stack trace for more info.\"\r\n    },\r\n    hashEmptyError: {\r\n        code: \"hash_empty_error\",\r\n        desc: \"Hash value cannot be processed because it is empty.\"\r\n    },\r\n    interactionInProgress: {\r\n        code: \"interaction_in_progress\",\r\n        desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.\"\r\n    },\r\n    popUpWindowError: {\r\n        code: \"popup_window_error\",\r\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\r\n    },\r\n    userCancelledError: {\r\n        code: \"user_cancelled\",\r\n        desc: \"User cancelled the flow.\"\r\n    },\r\n    popupWindowTimeoutError: {\r\n        code: \"popup_window_timeout\",\r\n        desc: \"Popup window token acquisition operation failed due to timeout.\"\r\n    },\r\n};\r\n\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nexport class BrowserAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n\r\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\r\n        this.name = \"BrowserAuthError\";\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when no window object can be found.\r\n     */\r\n    static createNoWindowObjectError(): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.noWindowObjectError.code, BrowserAuthErrorMessage.noWindowObjectError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when PKCE is not implemented.\r\n     * @param errDetail \r\n     */\r\n    static createPkceNotGeneratedError(errDetail: string): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code,\r\n            `${BrowserAuthErrorMessage.pkceNotGenerated.desc} Detail:${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the crypto object is unavailable.\r\n     * @param errDetail \r\n     */\r\n    static createCryptoNotAvailableError(errDetail: string): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, \r\n            `${BrowserAuthErrorMessage.cryptoDoesNotExist.desc} Detail:${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\r\n     * @param method \r\n     */\r\n    static createHttpMethodNotImplementedError(method: string): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code,\r\n            `${BrowserAuthErrorMessage.httpMethodNotImplementedError.desc} Given Method: ${method}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the navigation URI is empty.\r\n     */\r\n    static createEmptyNavigationUriError(): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the hash string value is unexpectedly empty.\r\n     * @param hashValue \r\n     */\r\n    static createEmptyHashError(hashValue: string): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, `${BrowserAuthErrorMessage.hashEmptyError.desc} Given Url: ${hashValue}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\r\n     */\r\n    static createInteractionInProgressError(): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the popup window could not be opened.\r\n     * @param errDetail \r\n     */\r\n    static createPopupWindowError(errDetail?: string): BrowserAuthError {\r\n        let errorMessage = BrowserAuthErrorMessage.popUpWindowError.desc;\r\n        errorMessage = !StringUtils.isEmpty(errDetail) ? `${errorMessage} Details: ${errDetail}` : errorMessage;\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.popUpWindowError.code, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the user closes a popup.\r\n     */\r\n    static createUserCancelledError(): BrowserAuthError {\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code,\r\n            BrowserAuthErrorMessage.userCancelledError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the \r\n     * @param urlNavigate \r\n     */\r\n    static createPopupWindowTimeoutError(urlNavigate: string): BrowserAuthError {\r\n        const errorMessage = `URL navigated to is ${urlNavigate}, ${BrowserAuthErrorMessage.popupWindowTimeoutError.desc}`;\r\n        return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowTimeoutError.code,\r\n            errorMessage);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { INetworkModule, NetworkRequestOptions } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nexport class XhrClient implements INetworkModule {\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<T> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\r\n    }\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<T> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\r\n    }\r\n\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url \r\n     * @param method \r\n     * @param options \r\n     */\r\n    private sendRequestAsync<T>(url: string, method: string, options?: NetworkRequestOptions): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            this.setXhrHeaders(xhr, options);\r\n            xhr.onload = (): void => {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(xhr.responseText);\r\n                }\r\n                try {\r\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\r\n                    resolve(jsonResponse);\r\n                } catch (e) {\r\n                    reject(xhr.responseText);\r\n                }\r\n            };\r\n\r\n            xhr.onerror = (): void => {\r\n                reject(xhr.status);\r\n            };\r\n\r\n            if (method === \"POST\" && options.body) {\r\n                xhr.send(options.body);\r\n            } else if (method === \"GET\") {\r\n                xhr.send();\r\n            } else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr \r\n     * @param options \r\n     */\r\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\r\n        if (options && options.headers) {\r\n            options.headers.forEach((value, key) => {\r\n                xhr.setRequestHeader(key, value);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { INetworkModule } from \"@azure/msal-common\";\r\nimport { FetchClient } from \"../network/FetchClient\";\r\nimport { XhrClient } from \"../network/XhrClient\";\r\n\r\n/**\r\n * Utility class for browser specific functions\r\n */\r\nexport class BrowserUtils {\r\n\r\n    // #region Window Navigation\r\n\r\n    /**\r\n     * Used to redirect the browser to the STS authorization endpoint\r\n     * @param {string} urlNavigate - URL of the authorization endpoint\r\n     */\r\n    static navigateWindow(urlNavigate: string): void {\r\n        window.location.assign(urlNavigate);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    static getDefaultRedirectUri(): string {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Returns best compatible network client object. \r\n     */\r\n    static getBrowserNetworkClient(): INetworkModule {\r\n        if (window.fetch) {\r\n            return new FetchClient();\r\n        } else {\r\n            return new XhrClient();\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { AuthOptions, SystemOptions, LoggerOptions, INetworkModule, LogLevel } from \"@azure/msal-common\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\n\r\n// Default timeout for popup windows in milliseconds\r\nconst DEFAULT_POPUP_TIMEOUT_MS = 60000;\r\n\r\nexport type BrowserAuthOptions = AuthOptions & {\r\n    navigateToLoginRequestUrl?: boolean;\r\n};\r\n\r\n/**\r\n * Use this to configure the below cache configuration options:\r\n *\r\n * - cacheLocation            - Used to specify the cacheLocation user wants to set. Valid values are \"localStorage\" and \"sessionStorage\"\r\n * - storeAuthStateInCookie   - If set, MSAL store's the auth request state required for validation of the auth flows in the browser cookies. By default this flag is set to false.\r\n */\r\nexport type CacheOptions = {\r\n    cacheLocation?: string;\r\n    storeAuthStateInCookie?: boolean;\r\n};\r\n\r\n/**\r\n * Library Specific Options\r\n *\r\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\r\n * - loadFrameTimeout             - maximum time the library should wait for a frame to load\r\n * - windowHashTimeout            - sets the wait time for hidden iFrame navigation\r\n * - tokenRenewalOffsetSeconds    - sets the window of offset needed to renew the token before expiry\r\n * - telemetry                    - Telemetry options for library network requests\r\n */\r\nexport type BrowserSystemOptions = SystemOptions & {\r\n    loggerOptions?: LoggerOptions;\r\n    networkClient?: INetworkModule;\r\n    windowHashTimeout?: number;\r\n};\r\n\r\n/**\r\n * Use the configuration object to configure MSAL and initialize the UserAgentApplication.\r\n *\r\n * This object allows you to configure important elements of MSAL functionality:\r\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\r\n * - cache: this is where you configure cache location and whether to store cache in cookies\r\n * - system: this is where you can configure the network client, logger, token renewal offset, and telemetry\r\n */\r\nexport type Configuration = {\r\n    auth?: BrowserAuthOptions,\r\n    cache?: CacheOptions,\r\n    system?: BrowserSystemOptions\r\n};\r\n\r\n// Default auth options for browser\r\nconst DEFAULT_AUTH_OPTIONS: BrowserAuthOptions = {\r\n    clientId: \"\",\r\n    tmp_clientSecret: \"\",\r\n    authority: null,\r\n    validateAuthority: true,\r\n    redirectUri: () => BrowserUtils.getDefaultRedirectUri(),\r\n    postLogoutRedirectUri: () => BrowserUtils.getDefaultRedirectUri(),\r\n    navigateToLoginRequestUrl: true\r\n};\r\n\r\n// Default cache options for browser\r\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {\r\n    cacheLocation: BrowserConstants.CACHE_LOCATION_SESSION,\r\n    storeAuthStateInCookie: false\r\n};\r\n\r\n// Default logger options for browser\r\nconst DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (level: LogLevel, message: string, containsPii: boolean): void => {\r\n        if (containsPii) {\r\n            return;\r\n        }\r\n        switch (level) {\r\n            case LogLevel.Error:\r\n                console.error(message);\r\n                return;\r\n            case LogLevel.Info:\r\n                console.info(message);\r\n                return;\r\n            case LogLevel.Verbose:\r\n                console.debug(message);\r\n                return;\r\n            case LogLevel.Warning:\r\n                console.warn(message);\r\n                return;\r\n        }\r\n    },\r\n    piiLoggingEnabled: false\r\n};\r\n\r\n// Default system options for browser\r\nconst DEFAULT_SYSTEM_OPTIONS: BrowserSystemOptions = {\r\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\r\n    networkClient: BrowserUtils.getBrowserNetworkClient(),\r\n    windowHashTimeout: DEFAULT_POPUP_TIMEOUT_MS\r\n};\r\n\r\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TAuthOptions\r\n * @param TCacheOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n *\r\n * @returns TConfiguration object\r\n */\r\nexport function buildConfiguration({ auth, cache = {}, system = {}}: Configuration): Configuration {\r\n    const overlayedConfig: Configuration = {\r\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\r\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\r\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system }\r\n    };\r\n    return overlayedConfig;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { AuthError } from \"@azure/msal-common\";\r\n\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const BrowserConfigurationAuthErrorMessage = {\r\n    storageNotSupportedError: {\r\n        code: \"storage_not_supported\",\r\n        desc: \"Given storage configuration option was not supported.\"\r\n    },\r\n    noRedirectCallbacksSet: {\r\n        code: \"no_redirect_callbacks\",\r\n        desc: \"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. \" +\r\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    invalidCallbackObject: {\r\n        code: \"invalid_callback_object\",\r\n        desc: \"The object passed for the callback was invalid. \" +\r\n          \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n};\r\n\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nexport class BrowserConfigurationAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"BrowserAuthError\";\r\n\r\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when given storage location is not supported.\r\n     * @param givenStorageLocation \r\n     */\r\n    static createStorageNotSupportedError(givenStorageLocation: string): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, `${BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc} Given Location: ${givenStorageLocation}`);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when callback object is invalid.\r\n     * @param callbackObject \r\n     */\r\n    static createInvalidCallbackObjectError(callbackObject: object): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.invalidCallbackObject.code,\r\n            `${BrowserConfigurationAuthErrorMessage.invalidCallbackObject.desc} Given value for callback function: ${callbackObject}`);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().\r\n     */\r\n    static createRedirectCallbacksNotSetError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { ICacheStorage, Constants, PersistentCacheKeys, TemporaryCacheKeys } from \"@azure/msal-common\";\r\nimport { CacheOptions } from \"../app/Configuration\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\n\r\n// Cookie life calculation (hours * minutes * seconds * ms)\r\nconst COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\r\n\r\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage. \r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for \r\n * parameters such as state and nonce, generally.\r\n */\r\nexport class BrowserStorage implements ICacheStorage {\r\n\r\n    // Cache configuration, either set by user or default values.\r\n    private cacheConfig: CacheOptions;\r\n    // Window storage object (either local or sessionStorage)\r\n    private windowStorage: Storage;\r\n    // Client id of application. Used in cache keys to partition cache correctly in the case of multiple instances of MSAL.\r\n    private clientId: string;\r\n\r\n    constructor(clientId: string, cacheConfig: CacheOptions) {\r\n        // Validate cache location\r\n        this.validateWindowStorage(cacheConfig.cacheLocation);\r\n\r\n        this.cacheConfig = cacheConfig;\r\n        this.windowStorage = window[this.cacheConfig.cacheLocation];\r\n        this.clientId = clientId;\r\n\r\n        // Migrate any cache entries from older versions of MSAL.\r\n        this.migrateCacheEntries();\r\n    }\r\n\r\n    /**\r\n     * Validates the the given cache location string is an expected value:\r\n     * - localStorage\r\n     * - sessionStorage (default)\r\n     * Also validates if given cacheLocation is supported on the browser.\r\n     * @param cacheLocation \r\n     */\r\n    private validateWindowStorage(cacheLocation: string): void {\r\n        if (typeof window === \"undefined\" || !window) {\r\n            throw BrowserAuthError.createNoWindowObjectError();\r\n        }\r\n\r\n        if (cacheLocation !== BrowserConstants.CACHE_LOCATION_LOCAL && cacheLocation !== BrowserConstants.CACHE_LOCATION_SESSION) {\r\n            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);\r\n        }\r\n\r\n        const storageSupported = !!window[cacheLocation];\r\n        if (!storageSupported) {\r\n            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private migrateCacheEntries(): void {\r\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\r\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\r\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\r\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\r\n\r\n        const idTokenValue = this.getItem(idTokenKey);\r\n        const clientInfoValue = this.getItem(clientInfoKey);\r\n        const errorValue = this.getItem(errorKey);\r\n        const errorDescValue = this.getItem(errorDescKey);\r\n\r\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\r\n\r\n        keysToMigrate.forEach((cacheKey, index) => this.migrateCacheEntry(cacheKey, values[index]));\r\n    }\r\n\r\n    /**\r\n     * Utility function to help with migration.\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private migrateCacheEntry(newKey: string, value: string): void {\r\n        if (value) {\r\n            this.setItem(newKey, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    private generateCacheKey(key: string): string {\r\n        try {\r\n            // Defined schemas do not need the key appended\r\n            this.validateObjectKey(key);\r\n            return key;\r\n        } catch (e) {\r\n            if (key.startsWith(`${Constants.CACHE_PREFIX}`) || key.startsWith(PersistentCacheKeys.ADAL_ID_TOKEN)) {\r\n                return key;\r\n            }\r\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses key as JSON object, JSON.parse() will throw an error.\r\n     * @param key \r\n     */\r\n    private validateObjectKey(key: string): void {\r\n        JSON.parse(key);\r\n    }\r\n\r\n    /**\r\n     * Sets the cache item with the key and value given. \r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key \r\n     * @param value \r\n     */\r\n    setItem(key: string, value: string): void {\r\n        const msalKey = this.generateCacheKey(key);\r\n        this.windowStorage.setItem(msalKey, value);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.setItemCookie(msalKey, value);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve frm cookies if storeAuthStateInCookie is set to true.\r\n     * @param key \r\n     */\r\n    getItem(key: string): string {\r\n        const msalKey = this.generateCacheKey(key);\r\n        const itemCookie = this.getItemCookie(msalKey);\r\n        if (this.cacheConfig.storeAuthStateInCookie && itemCookie) {\r\n            return itemCookie;\r\n        }\r\n        return this.windowStorage.getItem(msalKey);\r\n    }\r\n    \r\n    /**\r\n     * Removes the cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key \r\n     */\r\n    removeItem(key: string): void {\r\n        const msalKey = this.generateCacheKey(key);\r\n        this.windowStorage.removeItem(msalKey);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.clearItemCookie(msalKey);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key \r\n     */\r\n    containsKey(key: string): boolean {\r\n        const msalKey = this.generateCacheKey(key);\r\n        return this.windowStorage.hasOwnProperty(msalKey) || this.windowStorage.hasOwnProperty(key);\r\n    }\r\n    \r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys(): string[] {\r\n        return Object.keys(this.windowStorage);\r\n    }\r\n\r\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */\r\n    clear(): void {\r\n        let key: string;\r\n        for (key in this.windowStorage) {\r\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\r\n            if (this.windowStorage.hasOwnProperty(key) && (key.indexOf(Constants.CACHE_PREFIX) !== -1) && (key.indexOf(this.clientId) !== -1)) {\r\n                this.removeItem(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add value to cookies\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\r\n        let cookieStr = `${cookieName}=${cookieValue};path=/;`;\r\n        if (expires) {\r\n            const expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += `expires=${expireTime};`;\r\n        }\r\n\r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * Get one item by key from cookies\r\n     * @param cookieName\r\n     */\r\n    getItemCookie(cookieName: string): string {\r\n        const name = `${cookieName}=`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        for (let i = 0; i < cookieList.length; i++) {\r\n            let cookie = cookieList[i];\r\n            while (cookie.charAt(0) === \" \") {\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(name) === 0) {\r\n                return cookie.substring(name.length, cookie.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cookieName\r\n     */\r\n    clearItemCookie(cookieName: string): void {\r\n        this.setItemCookie(cookieName, \"\", -1);\r\n    }\r\n\r\n    /**\r\n     * Clear all msal cookies\r\n     */\r\n    clearMsalCookie(state?: string): void {\r\n        const nonceKey = state ? `${TemporaryCacheKeys.NONCE_IDTOKEN}|${state}` : TemporaryCacheKeys.NONCE_IDTOKEN;\r\n        this.clearItemCookie(nonceKey);\r\n        this.clearItemCookie(TemporaryCacheKeys.REQUEST_STATE);\r\n        this.clearItemCookie(TemporaryCacheKeys.ORIGIN_URI);\r\n    }\r\n\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    getCookieExpirationTime(cookieLifeDays: number): string {\r\n        const today = new Date();\r\n        const expr = new Date(today.getTime() + cookieLifeDays * COOKIE_LIFE_MULTIPLIER);\r\n        return expr.toUTCString();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility class for math specific functions in browser.\r\n */\r\nexport class MathUtils {\r\n\r\n    /**\r\n     * Decimal to Hex\r\n     *\r\n     * @param num\r\n     */\r\n    static decimalToHex(num: number): string {\r\n        let hex: string = num.toString(16);\r\n        while (hex.length < 2) {\r\n            hex = \"0\" + hex;\r\n        }\r\n        return hex;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { MathUtils } from \"../utils/MathUtils\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\n\r\nexport class GuidGenerator {\r\n\r\n    // browser crypto object used to generate random values\r\n    private cryptoObj: BrowserCrypto;\r\n\r\n    constructor(cryptoObj: BrowserCrypto) {\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    /*\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n     * pseudo-random numbers.\r\n     * The algorithm is as follows:\r\n     *     Set the two most significant bits (bits 6 and 7) of the\r\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n     *     Set the four most significant bits (bits 12 through 15) of the\r\n     *        time_hi_and_version field to the 4-bit version number from\r\n     *        Section 4.1.3. Version4\r\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n     *     values.\r\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n     * time-low               = 4hexOctet\r\n     * time-mid               = 2hexOctet\r\n     * time-high-and-version  = 2hexOctet\r\n     * clock-seq-and-reserved = hexOctet:\r\n     * clock-seq-low          = hexOctet\r\n     * node                   = 6hexOctet\r\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n     * y values are 8, 9, A, B\r\n     */\r\n    generateGuid(): string {\r\n        try {\r\n            const buffer: Uint8Array = new Uint8Array(16);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n\r\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\r\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\r\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\r\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\r\n        }\r\n        catch (err) {\r\n            const guidHolder: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            const hex: string = \"0123456789abcdef\";\r\n            let r: number = 0;\r\n            let guidResponse: string = \"\";\r\n            for (let i: number = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                } else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                } else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class BrowserStringUtils {\r\n\r\n    /**\r\n     * Converts string to Uint8Array\r\n     * @param sDOMStr \r\n     */\r\n    static stringToUtf8Arr (sDOMStr: string): Uint8Array {\r\n        let nChr;\r\n        let nArrLen = 0;\r\n        const nStrLen = sDOMStr.length;\r\n        /* mapping... */\r\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nMapIdx);\r\n            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\r\n        }\r\n\r\n        const aBytes = new Uint8Array(nArrLen);\r\n\r\n        /* transcription... */\r\n\r\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nChrIdx);\r\n            if (nChr < 128) {\r\n                /* one byte */\r\n                aBytes[nIdx++] = nChr;\r\n            } else if (nChr < 0x800) {\r\n                /* two bytes */\r\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x10000) {\r\n                /* three bytes */\r\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x200000) {\r\n                /* four bytes */\r\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x4000000) {\r\n                /* five bytes */\r\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else /* if (nChr <= 0x7fffffff) */ {\r\n                /* six bytes */\r\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            }\r\n        }\r\n\r\n        return aBytes;      \r\n    }\r\n\r\n    /**\r\n     * Converts Uint8Array to a string\r\n     * @param aBytes \r\n     */\r\n    static utf8ArrToString (aBytes: Uint8Array): string {\r\n        let sView = \"\";\r\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\r\n            nPart = aBytes[nIdx];\r\n            sView += String.fromCharCode(\r\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\r\n                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\r\n                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\r\n                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\r\n                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\r\n                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\r\n                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128\r\n                                    : /* nPart < 127 ? */ /* one byte */\r\n                                    nPart\r\n            );\r\n        }\r\n        return sView;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\n\r\n/**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class Base64Encode {\r\n    \r\n    /**\r\n     * Returns URL Safe b64 encoded string from a plaintext string.\r\n     * @param input \r\n     */\r\n    urlEncode(input: string): string {\r\n        return this.encode(input)\r\n            .replace(/=/g, \"\")\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\");\r\n    }\r\n\r\n    /**\r\n     * Returns URL Safe b64 encoded string from an int8Array.\r\n     * @param inputArr \r\n     */\r\n    urlEncodeArr(inputArr: Uint8Array): string {\r\n        return this.base64EncArr(inputArr)\r\n            .replace(/=/g, \"\")\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\");\r\n    }\r\n\r\n    /**\r\n     * Returns b64 encoded string from plaintext string.\r\n     * @param input \r\n     */\r\n    encode(input: string): string {\r\n        const inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(encodeURIComponent(input));\r\n        return this.base64EncArr(inputUtf8Arr);\r\n    }    \r\n\r\n    /**\r\n     * Base64 encode byte array\r\n     * @param aBytes \r\n     */\r\n    private base64EncArr(aBytes: Uint8Array): string {  \r\n        const eqLen = (3 - (aBytes.length % 3)) % 3;\r\n        let sB64Enc = \"\";\r\n      \r\n        for (let nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\r\n            nMod3 = nIdx % 3;\r\n            /* Uncomment the following line in order to split the output in lines 76-character long: */\r\n            /*\r\n            if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += \"\\r\\n\"; }\r\n            */\r\n            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\r\n            if (nMod3 === 2 || aBytes.length - nIdx === 1) {\r\n                sB64Enc += String.fromCharCode(\r\n                    this.uint6ToB64(nUint24 >>> 18 & 63), \r\n                    this.uint6ToB64(nUint24 >>> 12 & 63), \r\n                    this.uint6ToB64(nUint24 >>> 6 & 63), \r\n                    this.uint6ToB64(nUint24 & 63)\r\n                );\r\n                nUint24 = 0;\r\n            }\r\n        }\r\n\r\n        return  eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? \"=\" : \"==\");\r\n    }\r\n\r\n    /**\r\n     * Base64 string to array encoding helper\r\n     * @param nUint6 \r\n     */\r\n    private uint6ToB64 (nUint6: number): number {\r\n        return nUint6 < 26 ?\r\n            nUint6 + 65\r\n            : nUint6 < 52 ?\r\n                nUint6 + 71\r\n                : nUint6 < 62 ?\r\n                    nUint6 - 4\r\n                    : nUint6 === 62 ?\r\n                        43\r\n                        : nUint6 === 63 ?\r\n                            47\r\n                            :\r\n                            65;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\n\r\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class Base64Decode {\r\n\r\n    /**\r\n     * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n     * @param input \r\n     */\r\n    decode(input: string): string {\r\n        let encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n\r\n        const inputUtf8Arr = this.base64DecToArr(encodedString);\r\n        return decodeURIComponent(BrowserStringUtils.utf8ArrToString(inputUtf8Arr));\r\n    }\r\n\r\n    /**\r\n     * Decodes base64 into Uint8Array\r\n     * @param base64String \r\n     * @param nBlockSize \r\n     */\r\n    private base64DecToArr(base64String: string, nBlockSize?: number): Uint8Array {\r\n        const sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\r\n        const nInLen = sB64Enc.length;\r\n        const nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\r\n        const aBytes = new Uint8Array(nOutLen);\r\n\r\n        for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n            nMod4 = nInIdx & 3;\r\n            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n            if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n                }\r\n                nUint24 = 0;\r\n            }\r\n        }\r\n\r\n        return aBytes;\r\n    }\r\n\r\n    /**\r\n     * Base64 string to array decoding helper\r\n     * @param charNum \r\n     */\r\n    private b64ToUint6(charNum: number): number {\r\n        return charNum > 64 && charNum < 91 ?\r\n            charNum - 65\r\n            : charNum > 96 && charNum < 123 ? \r\n                charNum - 71\r\n                : charNum > 47 && charNum < 58 ?\r\n                    charNum + 4\r\n                    : charNum === 43 ?\r\n                        62\r\n                        : charNum === 47 ?\r\n                            63\r\n                            :\r\n                            0;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { PkceCodes } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\n\r\n// Charset to generate values from\r\nconst CV_CHARSET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\";\r\n// Constant byte array length\r\nconst RANDOM_BYTE_ARR_LENGTH = 32;\r\n\r\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\r\nexport class PkceGenerator {\r\n\r\n    private base64Encode: Base64Encode;\r\n    private cryptoObj: BrowserCrypto;\r\n\r\n    constructor(cryptoObj: BrowserCrypto) {\r\n        this.base64Encode = new Base64Encode();\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n     */\r\n    async generateCodes(): Promise<PkceCodes> {\r\n        const codeVerifier = this.generateCodeVerifier();\r\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\r\n        return {\r\n            verifier: codeVerifier,\r\n            challenge: codeChallenge\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates a random 32 byte buffer and returns the base64\r\n     * encoded string to be used as a PKCE Code Verifier\r\n     */\r\n    private generateCodeVerifier(): string {\r\n        try {\r\n            // Generate random values as utf-8\r\n            const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // verifier as string\r\n            const pkceCodeVerifierString = this.bufferToCVString(buffer);\r\n            // encode verifier as base64\r\n            const pkceCodeVerifierB64: string = this.base64Encode.urlEncode(pkceCodeVerifierString);\r\n            return pkceCodeVerifierB64;\r\n        } catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a base64 encoded PKCE Code Challenge string from the\r\n     * hash created from the PKCE Code Verifier supplied\r\n     */\r\n    private async generateCodeChallengeFromVerifier(pkceCodeVerifier: string): Promise<string> {\r\n        try {\r\n            // hashed verifier\r\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\r\n            // encode hash as base64\r\n            return this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\r\n        } catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a character string based on input array.\r\n     * @param buffer \r\n     */\r\n    private bufferToCVString(buffer: Uint8Array): string {\r\n        const charArr = [];\r\n        for (let i = 0; i < buffer.byteLength; i += 1) {\r\n            const index = buffer[i] % CV_CHARSET.length;\r\n            charArr.push(CV_CHARSET[index]);\r\n        }\r\n        return charArr.join(\"\");\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\n// SHA-256 hashing algorithm\r\nconst HASH_ALG = \"SHA-256\";\r\n\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nexport class BrowserCrypto {\r\n\r\n    constructor() {\r\n        if (!(this.hasCryptoAPI())) {\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto or msCrypto object not available.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString \r\n     */\r\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\r\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n\r\n        if (this.hasIECrypto()) {\r\n            return new Promise((resolve, reject) => {\r\n                const digestOperation = window[\"msCrypto\"].subtle.digest(HASH_ALG, data.buffer);\r\n                digestOperation.addEventListener(\"complete\", (e: { target: { result: ArrayBuffer | PromiseLike<ArrayBuffer>; }; }) => {\r\n                    resolve(e.target.result);\r\n                });\r\n                digestOperation.addEventListener(\"error\", (error: string) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        }\r\n\r\n        return window.crypto.subtle.digest(HASH_ALG, data);\r\n    }\r\n\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer \r\n     */\r\n    getRandomValues(dataBuffer: Uint8Array): void {\r\n        const cryptoObj = window[\"msCrypto\"] || window.crypto;\r\n        if (!cryptoObj.getRandomValues) {\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"getRandomValues does not exist.\");\r\n        }\r\n        cryptoObj.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    /**\r\n     * Checks whether IE crypto (AKA msCrypto) is available.\r\n     */\r\n    private hasIECrypto(): boolean {\r\n        return !!window[\"msCrypto\"];\r\n    }\r\n\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    private hasBrowserCrypto(): boolean {\r\n        return !!window.crypto;\r\n    }\r\n\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    private hasCryptoAPI(): boolean {\r\n        return this.hasIECrypto() || this.hasBrowserCrypto();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { ICrypto, PkceCodes } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { Base64Decode } from \"../encode/Base64Decode\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\n\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nexport class CryptoOps implements ICrypto {\r\n\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n    private b64Encode: Base64Encode;\r\n    private b64Decode: Base64Decode;\r\n    private pkceGenerator: PkceGenerator;\r\n\r\n    constructor() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto();\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input \r\n     */\r\n    base64Encode(input: string): string {\r\n        return this.b64Encode.encode(input);\r\n    }    \r\n    \r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input \r\n     */\r\n    base64Decode(input: string): string {\r\n        return this.b64Decode.decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generateCodes();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { AuthorizationCodeModule, TokenResponse } from \"@azure/msal-common\";\r\nimport { BrowserStorage } from \"../cache/BrowserStorage\";\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport abstract class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeModule;\r\n    protected browserStorage: BrowserStorage;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeModule, storageImpl: BrowserStorage) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n    }\r\n\r\n    /**\r\n     * Function to enable user interaction.\r\n     * @param requestUrl \r\n     */\r\n    abstract showUI(requestUrl: string): Window;\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash \r\n     */\r\n    abstract async handleCodeResponse(locationHash: string): Promise<TokenResponse>;\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { StringUtils, AuthorizationCodeModule, TemporaryCacheKeys, TokenResponse } from \"@azure/msal-common\";\r\nimport { InteractionHandler } from \"./InteractionHandler\";\r\nimport { BrowserStorage } from \"../cache/BrowserStorage\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\nexport class RedirectHandler extends InteractionHandler {\r\n\r\n    // Config to navigate to login request url. Set by user, default is true.\r\n    private navigateToLoginRequestUrl: boolean;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeModule, storageImpl: BrowserStorage, navigateToLoginRequestUrl: boolean) {\r\n        super(authCodeModule, storageImpl);\r\n        this.navigateToLoginRequestUrl = navigateToLoginRequestUrl;\r\n    }\r\n\r\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate \r\n     */\r\n    showUI(requestUrl: string): Window {\r\n        // Navigate if valid URL\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setItem(TemporaryCacheKeys.ORIGIN_URI, window.location.href);\r\n            this.browserStorage.setItem(BrowserConstants.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE);\r\n            this.authModule.logger.infoPii(\"Navigate to:\" + requestUrl);\r\n            // Navigate window to request URL\r\n            BrowserUtils.navigateWindow(requestUrl);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.authModule.logger.info(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n        // Return this window handle. Not used for redirect, but needed for API definition.\r\n        return window;\r\n    }\r\n\r\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash \r\n     */\r\n    async handleCodeResponse(locationHash: string): Promise<TokenResponse> {\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // If navigateToLoginRequestUrl is true, then cache the hash and navigate to cached request URI.\r\n        if (this.navigateToLoginRequestUrl) {\r\n            this.browserStorage.setItem(TemporaryCacheKeys.URL_HASH, locationHash);\r\n            if (window.parent === window) {\r\n                const loginRequestUrl = this.browserStorage.getItem(TemporaryCacheKeys.ORIGIN_URI);\r\n\r\n                // Redirect to home page if login request url is null (real null or the string null)\r\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                    this.authModule.logger.error(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                    window.location.href = \"/\";\r\n                } else {\r\n                    window.location.href = loginRequestUrl;\r\n                }\r\n            }\r\n            return null;\r\n        } else {\r\n            window.location.hash = \"\";\r\n        }\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(BrowserConstants.INTERACTION_STATUS_KEY);\r\n        // Handle code response.\r\n        const codeResponse = this.authModule.handleFragmentResponse(locationHash);\r\n        // Acquire token with retrieved code.\r\n        return this.authModule.acquireToken(codeResponse);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { UrlString, StringUtils, Constants, TokenResponse } from \"@azure/msal-common\";\r\nimport { InteractionHandler } from \"./InteractionHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\r\nexport class PopupHandler extends InteractionHandler {\r\n\r\n    // Currently opened window handle.\r\n    private currentWindow: Window;\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl \r\n     */\r\n    showUI(requestUrl: string): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setItem(BrowserConstants.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE);\r\n            // Open the popup window to requestUrl.\r\n            const popupWindow = this.openPopup(requestUrl, Constants.LIBRARY_NAME, BrowserConstants.POPUP_WIDTH, BrowserConstants.POPUP_HEIGHT);\r\n            // Save the window handle.\r\n            this.currentWindow = popupWindow;\r\n            this.authModule.logger.infoPii(\"Navigate to:\" + requestUrl);\r\n            // Return popup window handle.\r\n            return popupWindow;\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.authModule.logger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash \r\n     */\r\n    async handleCodeResponse(locationHash: string): Promise<TokenResponse> {\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(BrowserConstants.INTERACTION_STATUS_KEY);\r\n        // Handle code response.\r\n        const codeResponse = this.authModule.handleFragmentResponse(locationHash);\r\n        // Close window.\r\n        this.currentWindow.close();\r\n        // Acquire token with retrieved code.\r\n        return this.authModule.acquireToken(codeResponse);\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with a hash\r\n     * @param contentWindow - window that is being monitored\r\n     * @param timeout - milliseconds until timeout\r\n     * @param urlNavigate - url that was navigated to\r\n     */\r\n    monitorWindowForHash(contentWindow: Window, timeout: number, urlNavigate: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            const maxTicks = timeout / BrowserConstants.POPUP_POLL_INTERVAL_MS;\r\n            let ticks = 0;\r\n\r\n            const intervalId = setInterval(() => {\r\n                if (contentWindow.closed) {\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = contentWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (!href || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                // Only run clock when we are on same domain\r\n                ticks++;\r\n\r\n                if (UrlString.hashContainsKnownProperties(href)) {\r\n                    clearInterval(intervalId);\r\n                    resolve(contentWindow.location.hash);\r\n                } else if (ticks > maxTicks) {\r\n                    clearInterval(intervalId);\r\n                    contentWindow.close();\r\n                    reject(BrowserAuthError.createPopupWindowTimeoutError(urlNavigate)); // better error?\r\n                }\r\n            }, BrowserConstants.POPUP_POLL_INTERVAL_MS);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    private openPopup(urlNavigate: string, title: string, popUpWidth: number, popUpHeight: number): Window {\r\n        try {\r\n            /**\r\n             * adding winLeft and winTop to account for dual monitor\r\n             * using screenLeft and screenTop for IE8 and earlier\r\n             */\r\n            const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n            const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n            /**\r\n             * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n             * using document.documentElement.clientWidth for IE8 and earlier\r\n             */\r\n            const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n            const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n            const left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n            const top = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n\r\n            // open the window\r\n            const popupWindow = window.open(urlNavigate, title, \"width=\" + popUpWidth + \", height=\" + popUpHeight + \", top=\" + top + \", left=\" + left);\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createPopupWindowError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.authModule.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.removeItem(BrowserConstants.INTERACTION_STATUS_KEY);\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport { Account, AuthorizationCodeModule, AuthenticationParameters, INetworkModule, TokenResponse, UrlString, TemporaryCacheKeys, TokenRenewParameters } from \"@azure/msal-common\";\r\nimport { Configuration, buildConfiguration } from \"./Configuration\";\r\nimport { BrowserStorage } from \"../cache/BrowserStorage\";\r\nimport { CryptoOps } from \"../crypto/CryptoOps\";\r\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\r\nimport { PopupHandler } from \"../interaction_handler/PopupHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { AuthCallback } from \"../types/AuthCallback\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication {\r\n\r\n    // Input configuration by developer/user\r\n    private config: Configuration;\r\n\r\n    // auth functions imported from @azure/msal-common module\r\n    private authModule: AuthorizationCodeModule;\r\n\r\n    // callback for error/token response\r\n    private authCallback: AuthCallback = null;\r\n\r\n    // Crypto interface implementation\r\n    private browserCrypto: CryptoOps;\r\n\r\n    // Storage interface implementation\r\n    private browserStorage: BrowserStorage;\r\n\r\n    // Network interface implementation\r\n    private networkClient: INetworkModule;\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param {@link (Configuration:type)} configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        // Set the configuration.\r\n        this.config = buildConfiguration(configuration);\r\n\r\n        // Initialize the crypto class.\r\n        this.browserCrypto = new CryptoOps();\r\n\r\n        // Initialize the network module class.\r\n        this.networkClient = this.config.system.networkClient;\r\n\r\n        // Initialize the browser storage class.\r\n        this.browserStorage = new BrowserStorage(this.config.auth.clientId, this.config.cache);\r\n\r\n        // Create auth module.\r\n        this.authModule = new AuthorizationCodeModule({\r\n            auth: this.config.auth,\r\n            systemOptions: {\r\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\r\n                telemetry: this.config.system.telemetry\r\n            },\r\n            loggerOptions: {\r\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\r\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled\r\n            },\r\n            cryptoInterface: this.browserCrypto,\r\n            networkInterface: this.networkClient,\r\n            storageInterface: this.browserStorage\r\n        });\r\n    }\r\n\r\n    // #region Redirect Flow\r\n\r\n    /**\r\n     * Set the callback functions for the redirect flow to send back the success or error object.\r\n     * @param {@link (AuthCallback:type)} authCallback - Callback which contains\r\n     * an AuthError object, containing error data from either the server\r\n     * or the library, depending on the origin of the error, or the AuthResponse object \r\n     * containing data from the server (returned with a null or non-blocking error).\r\n     */\r\n    async handleRedirectCallback(authCallback: AuthCallback): Promise<void> {\r\n        // Check whether callback object was passed.\r\n        if (!authCallback) {\r\n            throw BrowserConfigurationAuthError.createInvalidCallbackObjectError(authCallback);\r\n        }\r\n\r\n        // Set the callback object.\r\n        this.authCallback = authCallback;\r\n        // Get current location hash from window or cache.\r\n        const { location: { hash } } = window;\r\n        const cachedHash = this.browserStorage.getItem(TemporaryCacheKeys.URL_HASH);\r\n        try {\r\n            // If hash exists, handle in window. Otherwise, continue execution.\r\n            const interactionHandler = new RedirectHandler(this.authModule, this.browserStorage, this.config.auth.navigateToLoginRequestUrl);\r\n            const responseHash = UrlString.hashContainsKnownProperties(hash) ? hash : cachedHash;\r\n            if (responseHash) {\r\n                const tokenResponse = await interactionHandler.handleCodeResponse(responseHash);\r\n                this.authCallback(null, tokenResponse);\r\n            }\r\n        } catch (err) {\r\n            this.authCallback(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so \r\n     * any code that follows this function will not execute.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     */\r\n    loginRedirect(request: AuthenticationParameters): void {\r\n        // Check if callback has been set. If not, handleRedirectCallbacks wasn't called correctly.\r\n        if (!this.authCallback) {\r\n            throw BrowserConfigurationAuthError.createRedirectCallbacksNotSetError();\r\n        }\r\n\r\n        // Check if interaction is in progress. Throw error in callback and return if true.\r\n        if (this.interactionInProgress()) {\r\n            this.authCallback(BrowserAuthError.createInteractionInProgressError());\r\n            return;\r\n        }\r\n\r\n        // Create redirect interaction handler.\r\n        const interactionHandler = new RedirectHandler(this.authModule, this.browserStorage, this.config.auth.navigateToLoginRequestUrl);\r\n\r\n        // Create login url, which will by default append the client id scope to the call.\r\n        this.authModule.createLoginUrl(request).then((navigateUrl) => {\r\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n            interactionHandler.showUI(navigateUrl);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects \r\n     * the page, so any code that follows this function will not execute.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To acquire only idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    acquireTokenRedirect(request: AuthenticationParameters): void {\r\n        // Check if callback has been set. If not, handleRedirectCallbacks wasn't called correctly.\r\n        if (!this.authCallback) {\r\n            throw BrowserConfigurationAuthError.createRedirectCallbacksNotSetError();\r\n        }\r\n\r\n        // Check if interaction is in progress. Throw error in callback and return if true.\r\n        if (this.interactionInProgress()) {\r\n            this.authCallback(BrowserAuthError.createInteractionInProgressError());\r\n            return;\r\n        }\r\n\r\n        // Create redirect interaction handler.\r\n        const interactionHandler = new RedirectHandler(this.authModule, this.browserStorage, this.config.auth.navigateToLoginRequestUrl);\r\n        // Create acquire token url.\r\n        this.authModule.createAcquireTokenUrl(request).then((navigateUrl) => {\r\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n            interactionHandler.showUI(navigateUrl);\r\n        });\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Popup Flow \r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * @returns {Promise.<TokenResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async loginPopup(request: AuthenticationParameters): Promise<TokenResponse> {\r\n        // Check if interaction is in progress. Throw error if true.\r\n        if (this.interactionInProgress()) {\r\n            throw BrowserAuthError.createInteractionInProgressError();\r\n        }\r\n\r\n        // Create login url, which will by default append the client id scope to the call.\r\n        const navigateUrl = await this.authModule.createLoginUrl(request);\r\n\r\n        // Acquire token with popup\r\n        return this.popupTokenHelper(navigateUrl);\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To acquire only idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<TokenResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async acquireTokenPopup(request: AuthenticationParameters): Promise<TokenResponse> {\r\n        // Check if interaction is in progress. Throw error if true.\r\n        if (this.interactionInProgress()) {\r\n            throw BrowserAuthError.createInteractionInProgressError();\r\n        }\r\n\r\n        // Create acquire token url.\r\n        const navigateUrl = await this.authModule.createAcquireTokenUrl(request);\r\n\r\n        // Acquire token with popup\r\n        return this.popupTokenHelper(navigateUrl);\r\n    }\r\n\r\n    /**\r\n     * Helper which acquires an authorization code with a popup from given url, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl \r\n     */\r\n    private async popupTokenHelper(navigateUrl: string): Promise<TokenResponse> {\r\n        // Create popup interaction handler.\r\n        const interactionHandler = new PopupHandler(this.authModule, this.browserStorage);\r\n        // Show the UI once the url has been created. Get the window handle for the popup.\r\n        const popupWindow = interactionHandler.showUI(navigateUrl);\r\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n        const hash = await interactionHandler.monitorWindowForHash(popupWindow, this.config.system.windowHashTimeout, navigateUrl);\r\n        // Handle response from hash string.\r\n        return interactionHandler.handleCodeResponse(hash);\r\n    }\r\n\r\n    // #region Silent Flow\r\n\r\n    /**\r\n     * Use this function to obtain a token before every call to the API / resource provider\r\n     *\r\n     * MSAL return's a cached token when available\r\n     * Or it send's a request to the STS to obtain a new token using a refresh token.\r\n     *\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<TokenResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     *\r\n     */\r\n    async acquireTokenSilent(tokenRequest: TokenRenewParameters): Promise<TokenResponse> {\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        return this.authModule.renewToken(tokenRequest);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Logout\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     */\r\n    logout(): void {\r\n        // create logout string and navigate user window to logout. Auth module will clear cache.\r\n        this.authModule.logout().then(logoutUri => {\r\n            BrowserUtils.navigateWindow(logoutUri);\r\n        });\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Getters and setters\r\n\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n     * @returns {string} redirect URL\r\n     *\r\n     */\r\n    public getRedirectUri(): string {\r\n        return this.authModule.getRedirectUri();\r\n    }\r\n\r\n    /**\r\n     * Use to get the post logout redirect uri configured in MSAL or null.\r\n     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} post logout redirect URL\r\n     */\r\n    public getPostLogoutRedirectUri(): string {\r\n        return this.authModule.getPostLogoutRedirectUri();\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no state is found\r\n     * @returns {@link Account} - the account object stored in MSAL\r\n     */\r\n    public getAccount(): Account {\r\n        return this.authModule.getAccount();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Helpers\r\n\r\n    private interactionInProgress(): boolean {\r\n        // Check whether value in cache is present and equal to expected value\r\n        return this.browserStorage.getItem(BrowserConstants.INTERACTION_STATUS_KEY) === BrowserConstants.INTERACTION_IN_PROGRESS_VALUE;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n"],"names":["extendStatics","__extends","__assign","__awaiter","__generator","module","DEFAULT_AUTH_OPTIONS","DEFAULT_SYSTEM_OPTIONS"],"mappings":"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"}