import { ServerRequestParameters } from "./ServerRequestParameters";
import { Authority } from "../auth/authority/Authority";
import { Account } from "../auth/Account";
import { ICrypto, PkceCodes } from "../crypto/ICrypto";
import { IdToken } from "../auth/IdToken";
import { AuthenticationParameters } from "../request/AuthenticationParameters";
/**
 * This class extends the ServerRequestParameters class. This class validates URL request parameters, checks for SSO and generates required URL.
 */
export declare class ServerCodeRequestParameters extends ServerRequestParameters {
    authorityInstance: Authority;
    responseType: string;
    userRequest: AuthenticationParameters;
    queryParameters: string;
    extraQueryParameters: string;
    generatedPkce: PkceCodes;
    nonce: string;
    account: Account;
    constructor(authority: Authority, clientId: string, userRequest: AuthenticationParameters, cachedAccount: Account, redirectUri: string, cryptoImpl: ICrypto, isLoginCall: boolean);
    /**
     * Appends extraScopesToConsent if passed
     */
    private appendExtraScopes;
    /**
     * Check to see if there are SSO params set in the Request
     * @param request
     */
    hasSSOParam(): boolean;
    /**
     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers
     * @param adalIdTokenObject
     */
    populateQueryParams(adalIdTokenObject?: IdToken): void;
    /**
     * Create navigation url.
     */
    createNavigateUrl(): Promise<string>;
    /**
     * Create a query parameter string.
     */
    protected createParamString(): Promise<Array<string>>;
    /**
     * Utility to test if valid prompt value is passed in the request
     * @param request
     */
    private validatePromptParameter;
    /**
     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer
     * in any login() or acquireToken() calls
     * @param idTokenObject
     * @param extraQueryParameters
     * @param sid
     * @param loginHint
     */
    private constructUnifiedCacheQueryParameter;
    /**
     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time
     * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user
     * domain_req utid received as part of the clientInfo
     * login_req uid received as part of clientInfo
     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters
     *
     * @param {@link Account} account - Account for which the token is requested
     * @param queryparams
     * @param {@link ServerRequestParameters}
     */
    private addHintParameters;
    /**
     * Add SID to extraQueryParameters
     * @param sid
     */
    private addSSOParameter;
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */
    private sanitizeEQParams;
    /**
     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed
     * @param extraQueryParameters
     */
    private generateQueryParametersString;
}
